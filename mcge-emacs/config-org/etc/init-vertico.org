* init-vertico.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-vertico.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
  ;;; init-vertico.el --- config  -*- lexical-binding: t; -*-

  ;;; Commentary:

  #+end_src

** Require
#+begin_src emacs-lisp
  ;;; Require:
  (require 'crm)
  (require 'vertico)
  (require 'vertico-directory)

  ;;; Code :

  #+end_src

** Code
#+begin_src emacs-lisp
  (add-hook 'after-init-hook #'vertico-mode)
  (setq vertico-count 15)                       ;; Number of candidates to display
  (setq vertico-resize nil)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'
  (setq vertico-cycle t)
  ;; Go from last to first candidate and first to last (cycle)?
  (setq vertico-mode t)

  ;; And prompt indicator to 'completing-read-multiple.'
  ;; We display [CRM<separator>], e.g:, [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    "Crm indicator.  ARGS."
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)
#+end_src

** Ends
#+begin_src emacs-lisp

  (provide 'init-vertico)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-vertico.el ends here
  #+end_src
