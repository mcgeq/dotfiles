* init-vertico.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-vertico.el") :lexical t
:END:

** Headers

#+BEGIN_SRC emacs-lisp
  ;;; init-vertico.el -- Config for Vertico -*- lexical-binding: t; -*-

  ;; Filename: init-vertico.el
  ;; Description: Config for Vertico
  ;; Author: mcge <mcgeq@outlook.com>
  ;; Copyright (C) 2024, mcge, all rights reserved.
  ;; Create   Date: 2025-01-04 15:00:00
  ;; Version: 0.1
  ;; Modified   By:  mcge <mcgeq@outlook.com>
  ;; Last Modified:  <2025-01-10 Fri 10:24>
  ;; Keywords:
  ;; Compatibility: GNU Emacs 31.0.50

  ;;; Commentary:
  ;;
  ;; Config for Vertico
  ;;

  ;;; Installation:
  ;;
  ;; Put init-vertico.el to your load-path.
  ;; The load-path is usually ~/elisp/.
  ;; It's set in your ~/.emacs like this:
  ;; (add-to-list 'load-path (expand-file-name "~/elisp"))
  ;;
  ;; And the following to your ~/.emacs startup file.
  ;;
  ;; (require 'init-vertico)
  ;;
  ;; No need more.

  ;;; Customize:
  ;;
  ;;
  ;;
  ;; All of the above can customize by:
  ;;      M-x customize-group RET init-aider RET
  ;;

  ;;; Change log:
  ;;

#+END_SRC

** Require
#+BEGIN_SRC emacs-lisp
  ;;; Require:

  (require 'crm)
  (require 'vertico)
  (require 'vertico-directory)
  (require 'orderless)
  (require 'pinyinlib)
  (require 'savehist)
  (require 'saveplace)
#+END_SRC

** Code

*** savehist

#+BEGIN_SRC emacs-lisp

;; savehist
(add-hook 'after-init-hook 'savehist-mode)

(setq enable-recursive-minibuffers t)
(setq history-length 1000)
(setq savehist-additional-variables '(mark-ring
                                      global-mark-ring
                                      search-ring
                                      regexp-search-ring
                                      extended-command-history))
(setq savehist-autosave-interval 300)
#+END_SRC

*** Save place mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'save-place-mode)
#+END_SRC


*** Orderless

#+BEGIN_SRC emacs-lisp
;; pinyinlib
;; orderless
;; Fuzzy find orders
(setq completion-styles '(orderless partial-completion basic)
      orderless-component-separator "[ &]" ;; Company
      completion-category-defaults nil
      completion-category-overrides '((file (styles partial-completion))))

;; make completion support pinyin
;; refer to https://emacs-china.org/t/vertico/17913/2
(defun completion-regex-pinyin (str)
  (orderless-regexp (pinyinlib-build-regexp-string str)))
(add-to-list 'orderless-matching-styles 'completion-regex-pinyin)
#+END_SRC


*** Vertico

#+BEGIN_SRC emacs-lisp
  ;; vertico
  (add-hook 'after-init-hook #'vertico-mode)
  (setq vertico-count 15)                       ;; Number of candidates to display
  (setq vertico-resize nil)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'
  (setq vertico-cycle t)
  ;; Go from last to first candidate and first to last (cycle)?
  (setq vertico-mode t)

  ;; And prompt indicator to 'completing-read-multiple.'
  ;; We display [CRM<separator>], e.g:, [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    "Crm indicator.  ARGS."
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)
#+END_SRC

**** Vertico Keymap

#+BEGIN_SRC emacs-lisp

  ;; vertico
  (lazy-load-set-keys
   '(
     ("<tab>"    .   vertico-insert)  ; Choose selected candidate
     ("<escape>" .   vertico-exit)    ; Close minibuffer
     ("DEL"      .   vertico-directory-delete-char)
     ("C-M-n"    .   vertico-next-group)
     ("C-M-p"    .   vertico-previous-group)
     )
   vertico-map)
#+END_SRC


** Ends
#+BEGIN_SRC emacs-lisp

(provide 'init-vertico)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-vertico.el ends here
#+END_SRC
