* init-smartparens.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-smartparens.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
;;; init-smartparens.el ---   -*- lexical-binding: t; -*-

;;; Commentary:

  #+end_src

** Require
#+begin_src emacs-lisp
;;; Require:
(require 'smartparens-config)

;;; Code:
  #+end_src

** smartparens
#+begin_src emacs-lisp
(samrtparens-global-mode t)
(show-smartparens-global-mode t)
(setq sp-autoskip-closing-pair 'always)       ;; 自动跳过已关闭的成对符号
(setq sp-hybrid-kill-entire-symbol nil)       ;; 禁止在 `sp-kill-hybrid-sexp` 中删除整个符号
(setq sp-show-pair-delay 0.2)                 ;; 设置显示匹配括号的延迟
(setq sp-show-pair-from-inside t)             ;; 当光标位于匹配括号内时显示匹配
(setq sp-cancel-autoskip-on-backward-movement nil) ;; 禁用在反向移动时取消自动跳过
(sp-with-modes '(org-mode)
  (sp-local-pair "*" "*"
                 :actions '(insert wrap)))
(sp-local-pair 'emacs-lisp-mode "'" nil :actions nil) ;; 禁用在 emacs-lisp-mode 中的 ' 配对
(define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)       ;; 向前跳到下一个配对符号
(define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)      ;; 向后跳到上一个配对符号
(define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)          ;; 向下跳到嵌套的配对符号
(define-key sp-keymap (kbd "C-M-a") 'sp-backward-down-sexp) ;; 向上跳到上一级配对符号
(define-key sp-keymap (kbd "C-M-e") 'sp-up-sexp)            ;; 向上跳到下一级配对符号
(define-key sp-keymap (kbd "C-M-u") 'sp-backward-up-sexp)   ;; 向上跳到上一级配对符号
(sp-local-pair 'emacs-lisp-mode "`" "'" :when '(sp-in-string-p)) ;; 仅在字符串内启用 ` 配对
(sp-local-pair 'org-mode "/" "/" :unless '(sp-in-comment-p))     ;; 禁止在注释中使用 / 配对
(define-key sp-keymap (kbd "M-(") 'sp-wrap-round)  ;; 使用圆括号包裹
(define-key sp-keymap (kbd "M-[") 'sp-wrap-square) ;; 使用方括号包裹
#+end_src

** Ends
#+begin_src emacs-lisp
(provide 'init-smartparens)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-smartparens.el ends here
  #+end_src
