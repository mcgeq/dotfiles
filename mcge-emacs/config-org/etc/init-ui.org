* init-ui.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-ui.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
;;; init-ui.el --- UI config  -*- lexical-binding: t; -*-

;;; Commentary:

#+end_src

** Require
#+begin_src emacs-lisp
;;; Require:
(require 'doom-themes)
(require 'doom-themes-ext-org)
(require 'doom-themes-ext-visual-bell)

;;; Code:

#+end_src

** Code
#+begin_src emacs-lisp
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t)

(doom-themes-visual-bell-config)
(doom-themes-org-config)

(load-theme 'doom-oceanic-next t)

(doom-themes-visual-bell-config)
(doom-themes-org-config)

#+end_src

** change theme

#+begin_src emacs-lisp :tangle no

(defvar mcge/org-mode-theme 'doom-solarized-light
  "Theme to use in org-mode.")

(defvar mcge/default-theme 'doom-city-lights
  "Default theme to use outside of org-mode.")

(defun mcge/load-org-mode-theme ()
  "Load theme for org-mode."
  (when (eq major-mode 'org-mode)
    (load-theme mcge/org-mode-theme t)))

(defun mcge/load-default-theme ()
  "Load the default theme."
  (unless (eq major-mode 'org-mode)
    (load-theme mcge/default-theme t)))

(defun mcge/org-mode-hook ()
  "Hook to run when entering org-mode."
  (mcge/load-org-mode-theme))

(defun mcge/global-mode-hook ()
  "Hook to run when leaving org-mode."
  (mcge/load-default-theme))

;(add-hook 'org-mode-hook #'mcge/org-mode-hook)
;(add-hook 'after-change-major-mode-hook #'mcge/global-mode-hook)
#+end_src

** nerd icons

#+begin_src emacs-lisp
;; nerd-icons
(require 'nerd-icons)
(setq nerd-icons-font-family (concat mcgemacs-custom-icon-font-family ""))

;(require 'nerd-icons-dired)
;(add-hook 'dired-mode-hook #'nerd-icons-dired-mode)

(require 'nerd-icons-completion)
(nerd-icons-completion-mode)
(add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)

#+end_src

** Ends
#+begin_src emacs-lisp

(provide 'init-ui)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-ui.el ends here
#+end_src
