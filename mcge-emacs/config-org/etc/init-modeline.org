* init-modeline.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-modeline.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
;;; init-modeline.el --- modeline config  -*- lexical-binding: t; -*-

;;; Commentary:

  #+end_src

** Require
#+begin_src emacs-lisp
;;; Require:


;;; Code:

  #+end_src

** Code
#+begin_src emacs-lisp
(defun dotemacs-mode-line-fill (face reserve)
  "Return empty space using FACE and leaving RESERVE space on the right."
  (unless reserve
    (setq reserve 20))
  (when (and (display-graphic-p) (eq 'right (get-scroll-bar-mode)))
    (setq reserve (- reserve 3)))
  (propertize " "
              'display `((space :align-to
                                (- (+ right right-fringe right-margin) ,reserve)))
              'face face))

(defun dotemacs-buffer-encoding-abbrev ()
  "The line ending convention used in the buffer."
  (let ((buf-coding (format "%s" buffer-file-coding-system)))
    (if (string-match "\\(dos\\|unix\\|mac\\)" buf-coding)
        (match-string 1 buf-coding)
      buf-coding)))

(setq-default mode-line-format
              (list
               "%e"
               mode-line-front-space
               ;; mode-line-mule-info
               ;; mode-line-client
               ;; mode-line-modified
               ;; mode-line-remote
               ;; mode-line-frame-identification
               " "
               ;; mode-line-buffer-identification
               '(:eval (propertize "%b" 'face 'font-lock-keyword-face
                                   'help-echo (buffer-file-name)))
               " [" ;; insert vs overwrite mode, input-method in a tooltip
               '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
                                   'face 'font-lock-preprocessor-face
                                   'help-echo (concat "Buffer is in "
                                                      (if overwrite-mode
                                                          "overwrite"
                                                        "insert") " mode")))

               ;; was this buffer modified since the last save?
               '(:eval (when (buffer-modified-p)
                         (concat "," (propertize "Mod"
                                                 'face 'font-lock-warning-face
                                                 'help-echo "Buffer has been modified"))))
               ;; is this buffer read-only?
               '(:eval (when buffer-read-only
                         (concat "," (propertize "RO"
                                                 'face 'font-lock-type-face
                                                 'help-echo "Buffer is read-only"))))
               "] "
               "["
               (propertize "%p" 'face 'font-lock-constant-face)
               "/"
               (propertize "%I" 'face 'font-lock-constant-face)
               "] "
               mode-line-modes

               "   "
               '(:eval `(vc-mode vc-mode))
               "   "
               ;; (dotemacs-mode-line-fill 'mode-line 35)
               ;;mode-line-position
               " ("
               (propertize "%l" 'face 'font-lock-type-face)
               ","
               (propertize "%c" 'face 'font-lock-type-face)
               ") "
               '(:eval (dotemacs-buffer-encoding-abbrev))
               "  "
               '(:eval mode-line-misc-info)
               mode-line-end-spaces
               ))
#+end_src

** Ends
#+begin_src emacs-lisp

(provide 'init-modeline)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-modeline.el ends here
  #+end_src
