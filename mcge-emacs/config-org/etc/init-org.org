* init-org.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-org.el") :lexical t
:END:

** Headers

#+BEGIN_SRC emacs-lisp
  ;;; init-org.el -- Config for Emacs Font -*- lexical-binding: t; -*-

  ;; Filename: init-org.el
  ;; Description: Config for Emacs Font
  ;; Author: mcge <mcgeq@outlook.com>
  ;; Copyright (C) 2024, mcge, all rights reserved.
  ;; Create   Date: 2025-01-04 15:00:00
  ;; Version: 0.1
  ;; Modified   By:  mcge <mcgeq@outlook.com>
  ;; Last Modified:  <2025-01-10 Fri 10:02>
  ;; Keywords:
  ;; Compatibility: GNU Emacs 31.0.50

  ;;; Commentary:
  ;;
  ;; Config for Font
  ;;

  ;;; Installation:
  ;;
  ;; Put init-org.el to your load-path.
  ;; The load-path is usually ~/elisp/.
  ;; It's set in your ~/.emacs like this:
  ;; (add-to-list 'load-path (expand-file-name "~/elisp"))
  ;;
  ;; And the following to your ~/.emacs startup file.
  ;;
  ;; (require 'init-org)
  ;;
  ;; No need more.

  ;;; Customize:
  ;;
  ;;
  ;;
  ;; All of the above can customize by:
  ;;      M-x customize-group RET init-aider RET
  ;;

  ;;; Change log:
  ;;

#+END_SRC

** Require

#+BEGIN_SRC emacs-lisp
;;; Require:
(require 'visual-fill-column)
(require 'mixed-pitch)
(require 'org-superstar)
(require 'org-appear)

#+END_SRC

** Code

#+BEGIN_SRC emacs-lisp
  ;;; Code:

  (setq org-ellipsis " ⭍"
        org-tags-column 0
        org-log-into-drawer t
        org-pretty-entities t
        org-startup-indented t
        org-hide-leading-stars nil
        org-hide-emphasis-markers t
        org-image-actual-width '(800)
        org-startup-with-inline-images t
        org-indent-mode-turns-on-hiding-stars nil)

  ;; done close time
  (setq org-log-done 'time)

  ;; TOOD 的关键词设置，可以设置不同的组
  (setq org-todo-keywords '((sequence
                             "TODO(t)"
                             "HOLD(h!)"
                             "WIP(i!)"
                             "WAIT(w!)"
                             "|"
                             "DONE(d!)"
                             "CANCELLED(c@/!)")
                            (sequence
                             "REPORT(r)"
                             "BUG(b)"
                             "KNOWNCAUSE(k)"
                             "|"
                             "FIXED(f!)")))
  ;; TODO 关键词的样式设置
  (setq org-todo-keyword-faces '(("TODO"       :foreground "#7c7c75" :weight bold)
                                 ("HOLD"       :foreground "#feb24c" :weight bold)
                                 ("WIP"        :foreground "#0098dd" :weight bold)
                                 ("WAIT"       :foreground "#9f7efe" :weight bold)
                                 ("DONE"       :foreground "#50a14f" :weight bold)
                                 ("CANCELLED"  :foreground "#ff6480" :weight bold)
                                 ("REPORT"     :foreground "magenta" :weight bold)
                                 ("BUG"        :foreground "red"     :weight bold)
                                 ("KNOWNCAUSE" :foreground "yellow"  :weight bold)
                                 ("FIXED"      :foreground "green"   :weight bold)))

  ;; 当标题行状态变化时标签同步发生的变化
  ;; Moving a task to CANCELLED adds a CANCELLED tag
  ;; Moving a task to WAIT adds a WAIT tag
  ;; Moving a task to HOLD adds WAIT and HOLD tags
  ;; Moving a task to a done state removes WAIT and HOLD tags
  ;; Moving a task to TODO removes WAIT, CANCELLED, and HOLD tags
  ;; Moving a task to DONE removes WAIT, CANCELLED, and HOLD tags
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAIT" ("WAIT" . t))
                ("HOLD" ("WAIT") ("HOLD" . t))
                (done ("WAIT") ("HOLD"))
                ("TODO" ("WAIT") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAIT") ("CANCELLED") ("HOLD")))))

  ;; 重复执行时加上时间戳
  (setq org-log-repeat 'time)
  ;; Deadline 修改时加上一条记录
  (setq org-log-redeadline 'note)
  ;; Schedule 修改时加上一条记录
  (setq org-log-reschedule 'note)
  ;; 以抽屉的方式记录
  (setq org-log-into-drawer t)
  ;; 紧接着标题行或者计划/截止时间戳后加上记录抽屉
  (setq org-log-state-notes-insert-after-drawers nil)

  (custom-set-faces
   '(org-level-1 ((t (:height 1.15))))
   '(org-level-2 ((t (:height 1.13))))
   '(org-level-3 ((t (:height 1.11))))
   '(org-level-4 ((t (:height 1.09))))
   '(org-level-5 ((t (:height 1.07))))
   '(org-level-6 ((t (:height 1.05))))
   '(org-level-7 ((t (:height 1.03))))
   '(org-level-8 ((t (:height 1.01))))
   '(org-tag ((t (:inherit 'fixed-pitch))))
   '(org-date ((t (:inherit 'fixed-pitch))))
   '(org-todo ((t (:inherit 'fixed-pitch))))
   '(org-done ((t (:inherit 'fixed-pitch))))
   '(org-drawer ((t (:inherit 'fixed-pitch))))
   '(org-ellipsis ((t (:inherit 'fixed-pitch))))
   '(org-property-value ((t (:inherit 'fixed-pitch))))
   '(org-special-keyword ((t (:inherit 'fixed-pitch))))
   '(org-headline-done ((t (:inherit 'variable-pitch)))))

  ;; visual-fill-column
  (setq visual-fill-column-width 88)

  ;; mixed-pitch
  (custom-set-faces
   '(default ((t (:font "FiraCode Nerd Font Mono"))))
   '(fixed-pitch ((t (:font "FiraCode Nerd Font Mono" :height 1.0))))
   '(variable-pitch ((t (:font "Noto Serif" :height 1.0)))))

  ;; org-superstar
  (setq org-superstar-leading-bullet ?\s
        org-superstar-special-todo-items t
        org-superstar-item-bullet-alist '((43 . "⬧") (45 . "⬨"))
        org-superstar-headline-bullets-list '("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))

  (custom-set-faces
   '(org-superstar-item ((t (:inherit 'fixed-pitch))))
   '(org-superstar-header-bullet ((t (:height 232 :inherit 'fixed-pitch)))))

  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local line-spacing 2)
              (visual-line-mode)
              (visual-fill-column-mode)
              (mixed-pitch-mode)
              (org-superstar-mode)
              (org-appear-mode)))

  (defun mg/org-font-lock-drawer (limit)
    (when (or (re-search-forward "SCHEDULED:\\(\\(.\\|\n\\)+:\s*\n\\)" limit t)
              (re-search-forward ".+?:\s+\\(.+\\)$" limit t))
      (let ((beg (match-beginning 1))
            (end (match-end 1)))
        (put-text-property beg end 'face 'fixed-pitch)
        (put-text-property (match-beginning 0) (match-end 0) 'font-lock-multiline 't)
        (goto-char end))))

  (font-lock-add-keywords 'org-mode
                          '(mg/org-font-lock-drawer))

  (font-lock-add-keywords 'org-mode
                          '(("\\cc\\( \\)[/+*_=~][^a-zA-Z0-9/+*_=~\n]+?[/+*_=~]\\( \\)?\\cc?"
                             (1 (prog1 () (compose-region (match-beginning 1) (match-end 1) ""))))))


#+END_SRC

** Ends

#+BEGIN_SRC emacs-lisp
(provide 'init-org)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-org.el ends here
#+END_SRC
