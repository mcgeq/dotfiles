* init-keymaps.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-keymaps.el") :lexical t
:END:

** Headers
#+BEGIN_SRC emacs-lisp
  ;;; init-keymaps.el -- Config for Keymaps -*- lexical-binding: t; -*-

  ;; Filename: init-keymaps.el
  ;; Description: Config for Emacs Start
  ;; Author: mcge <mcgeq@outlook.com>
  ;; Copyright (C) 2024, mcge, all rights reserved.
  ;; Create   Date: 2025-01-04 15:00:00
  ;; Version: 0.1
  ;; Modified   By: 2025-01-04 15:46:46
  ;; Keywords:
  ;; Compatibility: GNU Emacs 31.0.50

  ;;; Commentary:
  ;;
  ;; Config for Keymaps
  ;;

  ;;; Installation:
  ;;
  ;; Put init-keymaps.el to your load-path.
  ;; The load-path is usually ~/elisp/.
  ;; It's set in your ~/.emacs like this:
  ;; (add-to-list 'load-path (expand-file-name "~/elisp"))
  ;;
  ;; And the following to your ~/.emacs startup file.
  ;;
  ;; (require 'init-keymaps)
  ;;
  ;; No need more.

  ;;; Customize:
  ;;
  ;;
  ;;
  ;; All of the above can customize by:
  ;;      M-x customize-group RET init-aider RET
  ;;

  ;;; Change log:
  ;;

#+END_SRC



** Require
#+begin_src emacs-lisp
  ;;; Require:
  (require 'transient)
  (require 'markmacro)
  (require 'org)
#+end_src

** 删除不常用快捷键
#+begin_src emacs-lisp
  ;;; Code:
  ;; 解除不常用的快捷键定义
   (lazy-load-unset-keys
    '("C-z" "s-q" "M-m" "M-l"))
     ;; replace-string
     (global-set-key (kbd "C-c r") 'replace-string)
     ;; make-directory
     (global-set-key (kbd "C-c d") 'make-directory)
#+end_src

** 打开默认配置文件
#+begin_src emacs-lisp
(global-set-key (kbd "C-q") 'mcg/open-init-file)

#+end_src

** Custom C-a

#+begin_src emacs-lisp
  ;; C-a
  ;; 将新函数绑定到 Ctrl+a
  (global-set-key (kbd "C-a") 'mcge-smart-move-beginning-of-line)

#+end_src

** 插入新行
#+begin_src emacs-lisp
;; insert newline
(global-set-key (kbd "C-c <down>")
                (lambda ()
                  (interactive)
                  (end-of-line)
                  (newline-and-indent)))
(global-set-key (kbd "C-c <up>")
                (lambda ()
                  (interactive)
                  (beginning-of-line)
                  (newline)
                  (forward-line -1)
                  (indent-according-to-mode)))
(global-set-key (kbd "M-m p n")
                (lambda ()
                  (interactive)
                  (forward-line 1)
                  (transpose-lines 1)
                  (forward-line -1)
                  (indent-according-to-mode)))
;; move current line to prev or next line
(global-set-key (kbd "M-m p p")
                (lambda ()
                  (interactive)
                  (transpose-lines 1)
                  (forward-line -2)
                  (indent-according-to-mode)))
;; recentf
(global-set-key (kbd "C-c C-r")   'recentf)
#+end_src

** magit
#+begin_src emacs-lisp
;;; init-magit.el
;; magit
(lazy-load-global-keys
 '(
   ("M-m s t" . magit-status)
   ("M-m s a" . magit-submodule-add)
   ("M-m s r" . magit-submodule-remove)
   ("M-m f r" . magit-file-rename)
   ("M-m b r" . magit-branch-rename)
   ("M-m b c" . magit-branch-create)
   ("M-m r r" . magit-remote-rename)
   ("M-m l"   . magit-log)
   ("M-m d d" . magit-dispatch)
   ("M-m d f" . magit-file-dispatch)
   ("M-m p f" . magit-pull)
   ("M-m p h" . magit-push)
   ("M-m m"   . mcge-magit-menu)
   )
 "init-magit")
#+end_src

** Sort-tab
#+begin_src emacs-lisp
;; sort-tab
(global-set-key (kbd "M-s p") 'sort-tab-select-prev-tab)
(global-set-key (kbd "M-s n") 'sort-tab-select-next-tab)
(global-set-key (kbd "M-s q") 'sort-tab-close-current-tab)
(global-set-key (kbd "M-s o") 'sort-tab-close-other-tabs)
#+end_src

** yasnippets
#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-n") 'yas-new-snippet)
#+end_src

** elisp

#+begin_src emacs-lisp
;; elisp-mode
(let ((map emacs-lisp-mode-map))
  (define-key map (kbd "C-c C-b") 'eval-buffer)
  (define-key map (kbd "C-c C-c") 'eval-to-comment))
(let ((map lisp-interaction-mode-map))
  (define-key map (kbd "C-c C-c") 'eval-to-comment))
;;(let ((map org-mode-map))
;;  (define-key map (kbd "C-c C-;") 'eval-to-comment))
#+end_src

** vundo

#+begin_src emacs-lisp

;;; ### vundo ###
;;; --- 可视化撤销插件
(lazy-load-global-keys
 '(
   ("C-/" . undo)
   ("M-]" . vundo)
   )
 "init-vundo")
#+end_src

** Org

*** org capture

#+begin_src emacs-lisp
;; org-capture

(lazy-load-global-keys
 '(
   ("C-c c" . org-capture)
   ("C-c l" . org-store-link)
   )
 "init-capture-hugo")
#+end_src

*** Org Src Edit
#+begin_src emacs-lisp
  (lazy-load-set-keys
   '(("C-c e" . org-edit-src-code)
     )
   org-mode-map
   )
#+end_src

** Embark

#+begin_src emacs-lisp
  ;; embark

  (lazy-load-global-keys
   '(
     ("C-."     . embark-act)
     ("C-,"     . embark-dwim)
     ("C-h b"   . embark-bindings)
     ("C-h B"   . embark-bindings-at-point)
     ("C-x n"   . embark-next-symbol)
     ("C-x p"   . embark-previous-symbol)
     ("C-x j"   . consult-mark)
     ("C-c g"   . consult-ripgrep)
     ("C-c f"   . consult-find)
     ("C-c b"   . consult-buffer)
     ("C-c n h" . mcg/consult-find-org-headings)
     ("C-s"     . consult-line)
     ("M-s i"   . consult-imenu)
       )
    "init-embark")
#+END_SRC

** Lsp-Bridge

#+begin_src emacs-lisp
  ;;; --- 代码语法补全
(global-set-key (kbd "M-g d")  'lsp-bridge-find-def)
(global-set-key (kbd "M-g o")  'lsp-bridge-find-def-other-window)
(global-set-key (kbd "M-g c")  'lsp-bridge-popup-documentation)
(global-set-key (kbd "M-g D")    'lsp-bridge-find-def-return)
(global-set-key (kbd "M-g l")  'lsp-bridge-find-impl)
(global-set-key (kbd "M-g r")    'lsp-bridge-find-references)
(global-set-key (kbd "M-g n")    'lsp-bridge-rename)
(global-set-key (kbd "M-g j n")  'lsp-bridge-diagnostic-jump-next)
(global-set-key (kbd "M-g j p")  'lsp-bridge-diagnostic-jump-prev)
(global-set-key (kbd "M-g <up>") 'lsp-bridge-popup-documentation-scroll-up)
(global-set-key (kbd "M-g <down>") 'lsp-bridge-popup-documentation-scroll-down)

#+end_src


** Ends
#+begin_src emacs-lisp
(provide 'init-keymaps)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-keymaps.el ends here
#+end_src
