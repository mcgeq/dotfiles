* init-kbd.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-kbd.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
;;; init-kbd.el --- bind keyboard  -*- lexical-binding: t; -*-

;;; Commentary:

#+end_src

** Require
#+begin_src emacs-lisp
;;; Require:
(require 'vertico)
(require 'consult)
(require 'org-agenda)
(require 'org-src)
(require 'dirvish)
(require 'esh-mode)
(require 'tabspaces)
(require 'transient)

;;; Code:
#+end_src

** 删除不常用快捷键
#+begin_src emacs-lisp

;; 解除不常用的快捷键定义
(lazy-load-unset-keys
 '("C-z" "s-q" "M-m"))
;; replace-string
(global-set-key (kbd "C-c r") 'replace-string)
;; make-directory
(global-set-key (kbd "C-c d") 'make-directory)
#+end_src

** 打开默认配置文件
#+begin_src emacs-lisp
(global-set-key (kbd "C-q") 'mcg/open-init-file)

#+end_src

** Custom C-a

#+begin_src emacs-lisp
;; C-a
;; 将新函数绑定到 Ctrl+A
(global-set-key (kbd "C-a") 'mcge-smart-move-beginning-of-line)

#+end_src

** 插入新行
#+begin_src emacs-lisp
;; insert newline
(global-set-key (kbd "C-c <down>")
                (lambda ()
                  (interactive)
                  (end-of-line)
                  (newline-and-indent)))
(global-set-key (kbd "C-c <up>")
                (lambda ()
                  (interactive)
                  (beginning-of-line)
                  (newline)
                  (forward-line -1)
                  (indent-according-to-mode)))
(global-set-key (kbd "M-m p n")
                (lambda ()
                  (interactive)
                  (forward-line 1)
                  (transpose-lines 1)
                  (forward-line -1)
                  (indent-according-to-mode)))
;; move current line to prev or next line
(global-set-key (kbd "M-m p p")
                (lambda ()
                  (interactive)
                  (transpose-lines 1)
                  (forward-line -2)
                  (indent-according-to-mode)))

#+end_src


** color-rg
#+begin_src emacs-lisp
;; color-rg

(lazy-load-global-keys
 '(
   ("M-g s i" . color-rg-search-input)
   ("M-g s p" . color-rg-search-input-in-project)
   ("M-g s f" . color-rg-search-input-in-current-file)
   ("M-g s t" . color-rg-search-project-with-type)
   )
 "init-color-rg")
#+end_src

** aweshell
#+begin_src emacs-lisp
;; aweshell

(lazy-load-global-keys
 '(
   ("C-c h"   . eshell)
   ("M-g t t" . aweshell-toggle)
   ("M-g t c" . aweshell-new)
   ("M-g t n" . aweshell-next)
   ("M-g t p" . aweshell-prev)
   ("M-g t r" . aweshell-clear-buffer)
   ("M-g d t" . aweshell-dedicated-toggle)
   ("M-g d o" . aweshell-dedicated-open)
   ("M-g d c" . aweshell-dedicated-close)
   )
 "init-aweshell")
#+end_src

** lsp bridge
#+begin_src emacs-lisp
;; lsp-bridge
(global-set-key (kbd "M-g d f")  'lsp-bridge-find-def)
(global-set-key (kbd "M-g d o")  'lsp-bridge-find-def-other-window)
(global-set-key (kbd "M-g d c")  'lsp-bridge-popup-documentation)
(global-set-key (kbd "M-g D")    'lsp-bridge-find-def-return)
(global-set-key (kbd "M-g l c")  'lsp-bridge-find-impl)
(global-set-key (kbd "M-g l o")  'lsp-bridge-find-impl-other-window)
(global-set-key (kbd "M-g r")    'lsp-bridge-find-references)
(global-set-key (kbd "M-g n")    'lsp-bridge-rename)
(global-set-key (kbd "M-g j n")  'lsp-bridge-diagnostic-jump-next)
(global-set-key (kbd "M-g j p")  'lsp-bridge-diagnostic-jump-prev)
(global-set-key (kbd "M-g <up>") 'lsp-bridge-popup-documentation-scroll-up)
(global-set-key (kbd "M-g <down>") 'lsp-bridge-popup-documentation-scroll-down)
#+end_src

** sort-tab
#+begin_src emacs-lisp
;; sort-tab
(global-set-key (kbd "M-s <left>") 'sort-tab-select-prev-tab)
(global-set-key (kbd "M-s <right>") 'sort-tab-select-next-tab)
(global-set-key (kbd "M-s q") 'sort-tab-close-current-tab)
(global-set-key (kbd "M-s o") 'sort-tab-close-other-tabs)
#+end_src

** dogears
#+begin_src emacs-lisp
;; dogears
(global-set-key (kbd "M-g o") #'dogears-go)
(global-set-key (kbd "M-g M-b") #'dogears-back)
(global-set-key (kbd "M-g M-f") #'dogears-forward)
(global-set-key (kbd "M-g M-d") #'dogears-list)
(global-set-key (kbd "M-g M-D") #'dogears-sidebar)
#+end_src

** tabspaces
#+begin_src emacs-lisp
;; tabspaces
(global-set-key (kbd "M-s l")    'tabspaces-switch-or-create-workspace)
(global-set-key (kbd "M-s L")    'tabspaces-restore-session)
(global-set-key (kbd "M-s p")    'tabspaces-open-or-create-project-and-workspace)
(global-set-key (kbd "M-s f")    'tabspaces-project-switch-project-open-file)
(global-set-key (kbd "M-s s")    'tabspaces-save-session)
(global-set-key (kbd "M-s B")    'tabspaces-switch-buffer-and-tab)
(global-set-key (kbd "M-s b")    'tabspaces-switch-to-buffer)
(global-set-key (kbd "M-s R")    'tab-rename)
(global-set-key (kbd "M-s TAB")  'tab-bar-switch-to-recent-tab)
(global-set-key (kbd "M-s r")    'tabspaces-remove-current-buffer)
(global-set-key (kbd "M-s k")    'tabspaces-close-workspace)
#+end_src

** vertico
#+begin_src emacs-lisp
;; vertico
(lazy-load-set-keys
 '(
   ("<tab>"    .   vertico-insert)  ; Choose selected candidate
   ("<escape>" .   vertico-exit)    ; Close minibuffer
   ("DEL"      .   vertico-directory-delete-char)
   ("C-M-n"    .   vertico-next-group)
   ("C-M-p"    .   vertico-previous-group)
   )
 vertico-map)

#+end_src

** consult
#+begin_src emacs-lisp
;; consult

(lazy-load-global-keys
 '(
   ("C-x j"   . consult-mark)
   ("C-c g"   . consult-ripgrep)
   ("C-c f"   . consult-find)
   ("C-c b"   . consult-buffer)
   ("C-c n h" . mcg/consult-find-org-headings)
   ("C-s"     . consult-line)
   ("M-s i"   . consult-imenu)
   )
 "init-consult")
#+end_src

** emabrk
#+begin_src emacs-lisp
;; embark

(lazy-load-global-keys
 '(
   ("C-."   . embark-act)
   ("C-,"   . embark-dwim)
   ("C-h b" . embark-bindings)
   ("C-h B" . embark-bindings-at-point)
   ("C-x n" . embark-next-symbol)
   ("C-x p" . embark-previous-symbol)
   )
 "init-embark")
#+end_src

** magit
#+begin_src emacs-lisp
;;; init-magit.el
;; magit
(lazy-load-global-keys
 '(
   ("M-m s t" . magit-status)
   ("M-m s a" . magit-submodule-add)
   ("M-m s r" . magit-submodule-remove)
   ("M-m f r" . magit-file-rename)
   ("M-m b r" . magit-branch-rename)
   ("M-m b c" . magit-branch-create)
   ("M-m r r" . magit-remote-rename)
   ("M-m l"   . magit-log)
   ("M-m d d" . magit-dispatch)
   ("M-m d f" . magit-file-dispatch)
   ("M-m p f" . magit-pull)
   ("M-m p h" . magit-push)
   ("M-m m"   . mcge-magit-menu)
   )
 "init-magit")
#+end_src


** dirvish
#+begin_src emacs-lisp
;; use C-c f dirvish-quick-access   init-dired.el
(lazy-load-global-keys
 '(
   ("C-x M-f" . dirvish)
   )
 "init-dired")
#+end_src

** Org
*** org capture
#+begin_src emacs-lisp
;; org-capture

(lazy-load-global-keys
 '(
   ("C-c c" . org-capture)
   ("C-c l" . org-store-link)
   )
 "init-capture-hugo")
#+end_src

*** org agenda
#+begin_src emacs-lisp
;; org-agenda
(global-set-key (kbd "C-c a")   'org-agenda)
(let ((map org-agenda-mode-map))
  (define-key map
            (kbd "i") #'(lambda () (interactive) (org-capture nil "d")))
  (define-key map
            (kbd "J") 'consult-org-agenda))
#+end_src

*** org src
#+begin_src emacs-lisp
;; org-src
(global-set-key (kbd "C-c s") 'show-line-number-in-src-block)
#+end_src

*** org download
#+begin_src emacs-lisp
;; org-download

(lazy-load-global-keys
 '(
   ("C-c v" . mcge-paste-img)
   )
 "init-download")
#+end_src

*** Org roam
#+begin_src emacs-lisp
(lazy-load-global-keys
 '(
   ("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam-node-insert)
   ("C-c n c" . org-roam-capture)
   ("C-c n l" . org-roam-buffer-toggle)
   ("C-c n u" . org-roam-ui-mode)
   )
 "init-org-roam")
#+end_src

** elisp
#+begin_src emacs-lisp
;; elisp-mode
(let ((map emacs-lisp-mode-map))
  (define-key map (kbd "C-c C-b") 'eval-buffer)
  (define-key map (kbd "C-c C-c") 'eval-to-comment))
(let ((map lisp-interaction-mode-map))
  (define-key map (kbd "C-c C-c") 'eval-to-comment))
(let ((map org-mode-map))
  (define-key map (kbd "C-c C-;") 'eval-to-comment))
#+end_src


** yasnippets
#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-n") 'yas-new-snippet)
#+end_src

#+begin_src emacs-lisp :tangle no

(lazy-load-global-keys
 '(
   ("C-c C-n" . yas-new-snippet)
   )
 "init-yasnippet")
#+end_src

** Blink search

#+begin_src emacs-lisp

(lazy-load-global-keys
 '(
   ("M-s s" . blink-search)
   )
 "init-blink-search")
#+end_src

** vundo

#+begin_src emacs-lisp

;;; ### vundo ###
;;; --- 可视化撤销插件
(lazy-load-global-keys
 '(
   ("C-/" . undo)
   ("M-]" . vundo)
   )
 "init-vundo")
#+end_src

** Symbol Overlay
#+begin_src emacs-lisp
;;; ### symbol-overlay ###
;;;
(lazy-load-global-keys
 '(
   ("M-o" . symbol-overlay-put)
   )
 "init-symbol-overlay")

#+end_src

** Ibuffer

#+begin_src emacs-lisp

;;; Ibuffer
(lazy-load-global-keys
 '(
   ("C-x C-b" . ibuffer)
   )
 "init-ibuffer")

#+end_src

** Multiple Cursors
#+begin_src emacs-lisp
;; Multiple Cursors
(lazy-load-global-keys
 '(
   ("M-m s s" . mc/edit-lines)
   )
 "init-multiple-cursors")

#+end_src

** Markdown
#+begin_src emacs-lisp
(lazy-load-global-keys
 '(
   ("<f9>" . dh-hydra-markdown-mode/body)
   )
 "init-markdown")

#+end_src

** Fingertip
#+begin_src emacs-lisp
;;; `https://github.com/manateelazycat/lazycat-emacs/blob/master/site-lisp/config/init-key.el'
;;; ### Fingertip ###
;;; --- 结构化编程
(lazy-load-unset-keys
 '("M-J" "M-r" "M-s" "M-;" "C-M-f" "C-M-b" "M-)")
 fingertip-mode-map)                    ;卸载按键
(defvar fingertip-key-alist nil)
(setq fingertip-key-alist
      '(
        ;; 移动
        ("M-n" . fingertip-jump-left)
        ("M-p" . fingertip-jump-right)
        ;; 符号插入
        ("%" . fingertip-match-paren)            ;括号跳转
        ("(" . fingertip-open-round)             ;智能 (
        ("[" . fingertip-open-bracket)           ;智能 [
        ("{" . fingertip-open-curly)             ;智能 {
        (")" . fingertip-close-round)            ;智能 )
        ("]" . fingertip-close-bracket)          ;智能 ]
        ("}" . fingertip-close-curly)            ;智能 }
        ("（" . fingertip-open-chinese-round)    ;智能 （
        ("「" . fingertip-open-chinese-bracket)  ;智能 「
        ("【" . fingertip-open-chinese-curly)    ;智能 【
        ("）" . fingertip-close-chinese-round)   ;智能 ）
        ("」" . fingertip-close-chinese-bracket) ;智能 」
        ("】" . fingertip-close-chinese-curly)   ;智能 】
        ("\"" . fingertip-double-quote)          ;智能 "
        ("'" . fingertip-single-quote)           ;智能 '
        ("=" . fingertip-equal)                  ;智能 =
        ("SPC" . fingertip-space)                ;智能 space
        ("RET" . fingertip-newline)              ;智能 newline
        ;; 删除
        ("M-o" . fingertip-backward-delete) ;向后删除
        ("C-d" . fingertip-forward-delete)  ;向前删除
        ("C-k" . fingertip-kill)            ;向前kill
        ;; 包围
        ("M-\"" . fingertip-wrap-double-quote) ;用 " " 包围对象, 或跳出字符串
        ("M-'" . fingertip-wrap-single-quote) ;用 ' ' 包围对象, 或跳出字符串
        ("M-[" . fingertip-wrap-bracket)      ;用 [ ] 包围对象
        ("M-{" . fingertip-wrap-curly)        ;用 { } 包围对象
        ("M-(" . fingertip-wrap-round)        ;用 ( ) 包围对象
        ("M-)" . fingertip-unwrap)            ;去掉包围对象
        ;; 跳出并换行缩进
        ("M-:" . fingertip-jump-out-pair-and-newline) ;跳出括号并换行
        ;; 向父节点跳动
        ("C-j" . fingertip-jump-up)
        ))
(lazy-load-set-keys fingertip-key-alist fingertip-mode-map)

#+end_src

** Ends
#+begin_src emacs-lisp
(provide 'init-kbd)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-kbd.el ends here
#+end_src
