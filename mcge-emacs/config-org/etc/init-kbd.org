* init-kbd.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-kbd.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
  ;;; init-kbd.el --- bind keyboard  -*- lexical-binding: t; -*-

  ;;; Commentary:

  #+end_src

** Require
#+begin_src emacs-lisp
;;; Require:
(require 'lazy-load)
(require 'vertico)
(require 'consult)
(require 'org-agenda)
(require 'org-src)
(require 'dirvish)
(require 'esh-mode)
(require 'tabspaces)
(require 'transient)

;;; Code:
#+end_src

** 删除不常用快捷键
#+begin_src emacs-lisp

;; 解除不常用的快捷键定义
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "s-q") nil)
(global-set-key (kbd "M-m") nil)
;; replace-string
(global-set-key (kbd "C-c r") 'replace-string)
;; make-directory
(global-set-key (kbd "C-c d") 'make-directory)
#+end_src

** 打开默认配置文件
#+begin_src emacs-lisp
(global-set-key (kbd "C-q") 'mcg/open-init-file)
;; use C-x C-b call ibuffer command
(global-unset-key (kbd "C-x C-b"))
(global-set-key (kbd "C-x C-b") 'init-ibuffer-ibuffer)
#+end_src

** Custom C-a

#+begin_src emacs-lisp
;; C-a
;; 将新函数绑定到 Ctrl+A
(global-set-key (kbd "C-a") 'mcge-smart-move-beginning-of-line)

#+end_src

** 插入新行
#+begin_src emacs-lisp
;; insert newline
(global-set-key (kbd "M-<down>")
                (lambda ()
                  (interactive)
                  (end-of-line)
                  (newline-and-indent)))
(global-set-key (kbd "M-<up>")
                (lambda ()
                  (interactive)
                  (beginning-of-line)
                  (newline)
                  (forward-line -1)
                  (indent-according-to-mode)))
(global-set-key (kbd "C-M-<down>")
                (lambda ()
                  (interactive)
                  (forward-line 1)
                  (transpose-lines 1)
                  (forward-line -1)
                  (indent-according-to-mode)))
;; move current line to prev or next line
(global-set-key (kbd "C-M-<up>")
                (lambda ()
                  (interactive)
                  (transpose-lines 1)
                  (forward-line -2)
                  (indent-according-to-mode)))
#+end_src

** quickrun
#+begin_src emacs-lisp
;; quickrun
;;; c++
(global-set-key (kbd "C-c q")     'quickrun)
#+end_src

** color-rg
#+begin_src emacs-lisp
;; color-rg
(define-key isearch-mode-map (kbd "M-s M-s") 'isearch-toggle-color-rg)
(global-set-key (kbd "M-g s i")             'color-rg-search-input)
(global-set-key (kbd "M-g s p")             'color-rg-search-input-in-project)
(global-set-key (kbd "M-g s f")             'color-rg-search-input-in-current-file)
(global-set-key (kbd "M-g s t")             'color-rg-search-project-with-type)
#+end_src

** aweshell
#+begin_src emacs-lisp
;; aweshell
(global-set-key (kbd "M-g t t") 'aweshell-toggle)
(global-set-key (kbd "M-g t c") 'aweshell-new)
(global-set-key (kbd "M-g t n") 'aweshell-next)
(global-set-key (kbd "M-g t p") 'aweshell-prev)
(global-set-key (kbd "M-g t r") 'aweshell-clear-buffer)
(global-set-key (kbd "M-g d t") 'aweshell-dedicated-toggle)
(global-set-key (kbd "M-g d o") 'aweshell-dedicated-open)
(global-set-key (kbd "M-g d c") 'aweshell-dedicated-close)
#+end_src

** lsp bridge
#+begin_src emacs-lisp
;; lsp-bridge
(global-set-key (kbd "M-g d f")  'lsp-bridge-find-def)
(global-set-key (kbd "M-g d o")  'lsp-bridge-find-def-other-window)
(global-set-key (kbd "M-g d c")  'lsp-bridge-popup-documentation)
(global-set-key (kbd "M-g D")    'lsp-bridge-find-def-return)
(global-set-key (kbd "M-g l c")  'lsp-bridge-find-impl)
(global-set-key (kbd "M-g l o")  'lsp-bridge-find-impl-other-window)
(global-set-key (kbd "M-g r")    'lsp-bridge-find-references)
(global-set-key (kbd "M-g n")    'lsp-bridge-rename)
(global-set-key (kbd "M-g j n")  'lsp-bridge-diagnostic-jump-next)
(global-set-key (kbd "M-g j p")  'lsp-bridge-diagnostic-jump-prev)
(global-set-key (kbd "M-g <up>") 'lsp-bridge-popup-documentation-scroll-up)
(global-set-key (kbd "M-g <down>") 'lsp-bridge-popup-documentation-scroll-down)
#+end_src

** sort-tab
#+begin_src emacs-lisp
;; sort-tab
(global-set-key (kbd "M-s <left>") 'sort-tab-select-prev-tab)
(global-set-key (kbd "M-s <right>") 'sort-tab-select-next-tab)
(global-set-key (kbd "M-s q") 'sort-tab-close-current-tab)
(global-set-key (kbd "M-s o") 'sort-tab-close-other-tabs)
#+end_src

** dogears
#+begin_src emacs-lisp
;; dogears
(global-set-key (kbd "M-g o") #'dogears-go)
(global-set-key (kbd "M-g M-b") #'dogears-back)
(global-set-key (kbd "M-g M-f") #'dogears-forward)
(global-set-key (kbd "M-g M-d") #'dogears-list)
(global-set-key (kbd "M-g M-D") #'dogears-sidebar)
#+end_src

** tabspaces
#+begin_src emacs-lisp
;; tabspaces
(global-set-key (kbd "M-s l")    'tabspaces-switch-or-create-workspace)
(global-set-key (kbd "M-s L")    'tabspaces-restore-session)
(global-set-key (kbd "M-s p")    'tabspaces-open-or-create-project-and-workspace)
(global-set-key (kbd "M-s f")    'tabspaces-project-switch-project-open-file)
(global-set-key (kbd "M-s s")    'tabspaces-save-session)
(global-set-key (kbd "M-s B")    'tabspaces-switch-buffer-and-tab)
(global-set-key (kbd "M-s b")    'tabspaces-switch-to-buffer)
(global-set-key (kbd "M-s R")    'tab-rename)
(global-set-key (kbd "M-s TAB")  'tab-bar-switch-to-recent-tab)
(global-set-key (kbd "M-s r")    'tabspaces-remove-current-buffer)
(global-set-key (kbd "M-s k")    'tabspaces-close-workspace)
#+end_src

** eshell
#+begin_src emacs-lisp
;; eshell
(global-set-key (kbd "C-c h") 'eshell)

;; `C-d' 更加智能
(let ((map eshell-mode-map))
  (define-key map (kbd "C-d")  'eshell-delchar-or-maybe-eof)
  (define-key map (kbd "C-r")  'consult-history)
  (define-key map (kbd "C-l")  'eshell/clear))
#+end_src

** vertico
#+begin_src emacs-lisp
;; vertico
(define-key vertico-map (kbd "<tab>")      'vertico-insert)  ; Choose selected candidate
(define-key vertico-map (kbd "<escape>")   'vertico-exit)    ; Close minibuffer
(define-key vertico-map (kbd "DEL")        'vertico-directory-delete-char)
(define-key vertico-map (kbd "C-M-n")      'vertico-next-group)
(define-key vertico-map (kbd "C-M-p")      'vertico-previous-group)
#+end_src

** consult
#+begin_src emacs-lisp
;; consult
(global-set-key (kbd "C-x j")              'consult-mark)
(global-set-key (kbd "C-c g")              'consult-ripgrep)
(global-set-key (kbd "C-c f")              'consult-find)
(global-set-key (kbd "C-c b")              'consult-buffer)
(global-set-key (kbd "C-c n h")            'mcg/consult-find-org-headings)
(define-key minibuffer-local-map (kbd "C-r") 'consult-history)
;(define-key isearch-mode-map (kbd "C-s")     'consult-line)
(global-set-key (kbd "C-s")                  'consult-line)
(define-key prog-mode-map (kbd "C-c C-j")    'consult-outline)
(global-set-key (kbd "M-s i")                'consult-imenu)
#+end_src

** emabrk
#+begin_src emacs-lisp
;; embark
(global-set-key (kbd "C-.")                  'embark-act)
(global-set-key (kbd "C-,")                  'embark-dwim)
(global-set-key (kbd "C-h b")                'embark-bindings)
(global-set-key (kbd "C-h B")                'embark-bindings-at-point)
(global-set-key (kbd "C-x n")                'embark-next-symbol)
(global-set-key (kbd "C-x p")                'embark-previous-symbol)
#+end_src

** magit
#+begin_src emacs-lisp
;;; init-magit.el
;; magit
(global-set-key (kbd "M-m s t")               'magit-status)
(global-set-key (kbd "M-m s a")               'magit-submodule-add)
(global-set-key (kbd "M-m s r")               'magit-submodule-remove)
(global-set-key (kbd "M-m f r")               'magit-file-rename)
(global-set-key (kbd "M-m b r")               'magit-branch-rename)
(global-set-key (kbd "M-m b c")               'magit-branch-create)
(global-set-key (kbd "M-m r r")               'magit-remote-rename)
(global-set-key (kbd "M-m l")                 'magit-log)
(global-set-key (kbd "M-m d d")               'magit-dispatch)
(global-set-key (kbd "M-m d f")               'magit-file-dispatch)
(global-set-key (kbd "M-m p f")               'magit-pull)
(global-set-key (kbd "M-m p h")               'magit-push)
(global-set-key (kbd "M-m m")                 'mcge-magit-menu)
;; 自定义magit菜单
(transient-define-prefix mcge-magit-menu ()
  "My custom Magit menu."
  [[
   ("t" "Status" magit-status)]
   ["Log Operations"
    ("l l" "Show Logs" magit-log)]
   ["Submodules"
    ("s a" "Add    Submodule" magit-submodule-add)
    ("s r" "Remove Submodule" magit-submodule-remove)
    ("s u" "Update Submodule" magit-submodule-update)]
   ["Branch Operations"
    ("b c" "Create       Branch" magit-branch-create)
    ("b C" "Checkout     Branch" magit-branch-checkout)
    ("b n" "New Checkout Branch" magit-branch-and-checkout)
    ("b m" "Merge        Branch" magit-merge)
    ("b d" "Delete       Branch" magit-branch-delete)
    ("b r" "Rename       Branch" magit-branch-rename)
    ("b R" "Reset        Branch" magit-branch-reset)]
   ["File Operations"
    ("f r" "Rename file" magit-file-rename)]
   ["Remote Operations"
    ("r a" "Add    Remote" magit-remote-add)
    ("r r" "Rename Remote" magit-remote-rename)]
   ])
#+end_src


** dirvish
#+begin_src emacs-lisp
;; use C-c f dirvish-quick-access   init-dired.el
(let ((map dirvish-mode-map))
  (define-key map (kbd "a")    'dirvish-quick-access)
  (define-key map (kbd "f")    'dirvish-file-info-menu)
  (define-key map (kbd "y")    'dirvish-yank-menu)
  (define-key map (kbd "N")    'dirvish-narrow)
  (define-key map (kbd "^")    'dirvish-history-last)
  (define-key map (kbd "h")    'dirvish-history-jump) ; remapped `describe-mode'
  (define-key map (kbd "s")    'dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
  (define-key map (kbd "v")    'dirvish-vc-menu)      ; remapped `dired-view-file'
  (define-key map (kbd "TAB")  'dirvish-subtree-toggle)
  (define-key map (kbd "M-f")  'dirvish-history-go-forward)
  (define-key map (kbd "M-b")  'dirvish-history-go-backward)
  (define-key map (kbd "M-l")  'dirvish-ls-switches-menu)
  (define-key map (kbd "M-m")  'dirvish-mark-menu)
  (define-key map (kbd "M-t")  'dirvish-layout-toggle)
  (define-key map (kbd "M-s")  'dirvish-setup-menu)
  (define-key map (kbd "M-e")  'dirvish-emerge-menu)
  (define-key map (kbd "M-j")  'dirvish-fd-jump)
)
#+end_src

** Org
*** org capture
#+begin_src emacs-lisp
;; org-capture
(global-set-key (kbd "C-c c")        'org-capture)
(global-set-key (kbd "C-c l")        'org-store-link)
#+end_src

*** org agenda
#+begin_src emacs-lisp
;; org-agenda
(global-set-key (kbd "C-c a")   'org-agenda)
(let ((map org-agenda-mode-map))
  (define-key map
            (kbd "i") #'(lambda () (interactive) (org-capture nil "d")))
  (define-key map
            (kbd "J") 'consult-org-agenda))
#+end_src

*** org src
#+begin_src emacs-lisp
;; org-src
(global-set-key (kbd "C-c s") 'show-line-number-in-src-block)
(let ((map org-src-mode-map))
  (define-key map (kbd "C-c C-c") 'org-edit-src-exit))
#+end_src

*** org download
#+begin_src emacs-lisp
;; org-download
(global-set-key (kbd "C-c v") (if *is-win32p* #'mcg/org-screenshot-on-windows
                                'org-download-clipboard))
#+end_src

** elisp
#+begin_src emacs-lisp
;; elisp-mode
(let ((map emacs-lisp-mode-map))
  (define-key map (kbd "C-c C-b") 'eval-buffer)
  (define-key map (kbd "C-c C-c") 'eval-to-comment))
(let ((map lisp-interaction-mode-map))
  (define-key map (kbd "C-c C-c") 'eval-to-comment))
(let ((map org-mode-map))
  (define-key map (kbd "C-c C-;") 'eval-to-comment))
#+end_src


** yasnippets
#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-n") 'yas-new-snippet)
#+end_src

** Blink search

#+begin_src emacs-lisp
(global-set-key (kbd "M-s s")  'blink-search)

#+end_src

** vundo

#+begin_src emacs-lisp

;;; ### vundo ###
;;; --- 可视化撤销插件
(lazy-load-global-keys
 '(
   ("C-/" . undo)
   ("C-?" . vundo)
   )
 "init-vundo")
#+end_src

** Ends
#+begin_src emacs-lisp
(provide 'init-kbd)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-kbd.el ends here
#+end_src
