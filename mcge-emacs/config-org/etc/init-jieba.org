* init-jieba.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-jieba.el") :lexical t
:END:

** Headers
#+BEGIN_SRC emacs-lisp
;;; init-jieba.el -- Emacs initialization config -*- lexical-binding: t; -*-
;;; Commentary:
#+END_SRC

** Require
#+BEGIN_SRC emacs-lisp
;;; Require:
(require 'request)

;;; Code:
#+END_SRC

** Code

#+begin_src emacs-lisp
(defun call-jieba-segment (text)
  "调用 RESTful API 使用 jieba 分词 TEXT。"
  (let ((response (request
                    "http://127.0.0.1:20193/segment"
                    :type "POST"
                    :data (json-encode `(("text" . ,text)))
                    :headers '(("Content-Type" . "application/json"))
                    :parser 'json-read
                    :sync t)))
    ;; (message "请求状态: %s" (request-response-status-code response))
    ;; (message "请求响应: %S" (request-response-data response))
    (if (not (eq (request-response-status-code response) 200))
        (error "调用 jieba 分词 API 失败: %s"
               (request-response-status-code response))
      (request-response-data response))))

(defun get-current-sentence ()
  "获取当前光标所在的句子。"
  (save-excursion
    (let (beg end)
      (setq beg (progn (backward-sentence) (point)))
      (setq end (progn (forward-sentence) (forward-sentence) (point)))
      (buffer-substring-no-properties beg end))))

(defun get-segmented-words ()
  "获取当前句子的分词结果。"
  (let* ((sentence (get-current-sentence))
         (words (call-jieba-segment sentence)))
    (append words nil)))

(defun get-sentence-boundaries ()
  "获取当前句子的起始和结束位置。"
  (save-excursion
    (let (beg end)
      (setq beg (progn (backward-sentence) (point)))
      (setq end (progn (forward-sentence) (forward-sentence) (point)))
      (cons beg end))))

(defun backward-word-by-jieba ()
  "基于 jieba 分词结果向后移动一个单词。"
  (interactive)
  (let* ((words (get-segmented-words))
         (pos (point))
         (boundaries (get-sentence-boundaries))
         (sentence-start (car boundaries))
         (word-starts (let ((start sentence-start)
                            starts)
                        (dolist (word words)
                          (setq starts (append starts (list start)))
                          (setq start (+ start (length word))))
                        starts)))
    (catch 'break
      (dolist (start (reverse word-starts))
        (when (< start pos)
          (goto-char start)
          (throw 'break nil))))))

(defun backward-delete-word-by-jieba ()
  "基于 jieba 分词结果向后删除一个单词。"
  (interactive)
  (let* ((words (get-segmented-words))
         (pos (point))
         (boundaries (get-sentence-boundaries))
         (sentence-start (car boundaries))
         (word-starts (let ((start sentence-start)
                            starts)
                        (dolist (word words)
                          (setq starts (append starts (list start)))
                          (setq start (+ start (length word))))
                        starts)))
    (catch 'break
      (dolist (start (reverse word-starts))
        (when (< start pos)
          (delete-region start pos)
          (throw 'break nil))))))

(defun forward-word-by-jieba ()
  "基于 jieba 分词结果向前移动一个单词。"
  (interactive)
  (let* ((words (get-segmented-words))
         (pos (point))
         (boundaries (get-sentence-boundaries))
         (sentence-start (car boundaries))
         (word-starts (let ((start sentence-start)
                            starts)
                        (dolist (word words)
                          (setq starts (append starts (list start)))
                          (setq start (+ start (length word))))
                        starts)))
    (catch 'break
      (dolist (start word-starts)
        (when (> start pos)
          (goto-char start)
          (throw 'break nil))))))

(defun forward-delete-word-by-jieba ()
  "基于 jieba 分词结果向前删除一个单词。"
  (interactive)
  (let* ((words (get-segmented-words))
         (pos (point))
         (boundaries (get-sentence-boundaries))
         (sentence-start (car boundaries))
         (sentence-end (cdr boundaries))
         (word-starts (let ((start sentence-start)
                            starts)
                        (dolist (word words)
                          (setq starts (append starts (list start)))
                          (setq start (+ start (length word))))
                        starts)))
    (catch 'break
      (dolist (start word-starts)
        (when (> start pos)
          (delete-region pos start)
          (throw 'break nil)))
      ;; 如果没有找到大于 pos 的分词起始位置，则删除到句子的结束位置
      (when (< pos sentence-end)
        (delete-region pos sentence-end)))))

;; 将函数绑定到快捷键
(global-set-key (kbd "M-b") 'backward-word-by-jieba)
(global-set-key (kbd "M-DEL") 'backward-delete-word-by-jieba)
(global-set-key (kbd "M-f") 'forward-word-by-jieba)
(global-set-key (kbd "M-d") 'forward-delete-word-by-jieba)
#+end_src

** Ends
#+BEGIN_SRC emacs-lisp
(provide 'init-jieba)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-jieba.el ends here
#+END_SRC

