* init-org-capture.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-org-capture.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
;;; init-org-capture.el --- org-capture config  -*- lexical-binding: t; -*-

;;; Commentary:

  #+end_src

** Require
#+begin_src emacs-lisp
;;; Require:
(require 'org-capture)

;;; Code:

  #+end_src

** Code
#+begin_src emacs-lisp
(add-hook 'org-capture-mode-hook #'(lambda() (setq-local
                                              org-complete-tags-always-offer-all-agenda-tags t)))
(add-hook 'org-capture-mode-hook 'delete-other-windows)

(setq org-capture-use-agenda-date nil)
;; define common template

(setq org-capture-templates nil)
(add-to-list 'org-capture-templates '("t" "Tasks"))
(add-to-list 'org-capture-templates '("tr" "Book Reading Task" entry (file+olp org-file-task "Reading Book")
                                       "* TODO %^{书名}\n%u\n%a\n" :clock-in t))
(add-to-list 'org-capture-templates '("tw" "Work Task" entry (file+headline org-file-task "Work")
                                       "* TODO %^{任务名}\n%u\n%a\n" :clock-in t :clock-resume t))

(add-to-list 'org-capture-templates '("d" "Diary"))
(add-to-list 'org-capture-templates '("dt" "Today's TODO List" entry (file+olp+datetree org-file-diary)
                                      "Today's TODO List [/]\n%T\n\n** TODO %?"
                                      :empty-lines 1
                                      :jump-to-captured t))
(add-to-list 'org-capture-templates '("do" "Other stuff" entry (file+olp+datetree org-file-diary)
                               "* %?\nT\n\n%i"
                               :empty-lines 1
                               :jump-to-captured t))

(add-to-list 'org-capture-templates '("n" "Notes" entry (file org-file-note)
                                       "* %^{heading} %t %^g\n %?\n"
                                       :empty-lines 1))

(add-to-list 'org-capture-templates '("j" "Journal" entry (file+datetree org-file-journal)
                                       "* %U - %^{heading} %^g\n %?\n"
                                       :empty-lines 1))

(add-to-list 'org-capture-templates '("b" "Billing" plain (file+function org-file-billing find-month-tree)
                                      " | %U | %^{类别} | %^{描述} | %^{金额} |" :kill-buffer t))

(add-to-list 'org-capture-templates '("p" "Passwords" entry (file org-file-password)
                                      "* %U - %^{title} %^G\n\n - 用户名: %^{用户名}\n - 密码: %(get-or-create-password)"
                                      :empty-lines 1
                                      :kill-buffer t))
;; 管理密码 https://www.zmonster.me/2018/02/28/org-mode-capture.html#org17ea029

;; 加密密码
(defun random-alphanum ()
  (let* ((charset "abcdefghijklmnopqurstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
         (x (random 62)))
    (char-to-string (elt charset x))))

(defun create-password ()
  (let ((value ""))
    (dotimes (number 16 value)
      (setq value (concat value (random-alphanum))))))

(defun get-or-create-password ()
  (setq password (read-string "Password: "))
  (if (string= password "")
      (create-password)
    password))

(defun get-year-and-month ()
  (list (format-time-string "%Y 年") (format-time-string "%m 月")))

(defun find-month-tree ()
  (let* ((path (get-year-and-month))
         (level 1)
         end)
    (unless (derived-mode-p 'org-mode)
      (error "Target buffer \"%s\" should be in Org mode" (current-buffer)))
    (goto-char (point-min))
    (dolist (heading path)
      (let ((re (format org-complex-heading-regexp-format
                        (regexp-quote heading)))
            (cnt 0))
        (if (re-search-forward re end t)
            (goto-char (line-beginning-position))
          (progn
            (or (bolp) (insert "\n"))
            (if (/= (point) (point-min)) (org-end-of-subtree t t))
            (insert (make-string level ?*) " " heading "\n"))))
      (setq level (1+ level))
      (setq end (save-excursion (org-end-of-subtree t t))))
    (org-end-of-subtree)))
#+end_src

** unless
#+begin_src emacs-lisp :tangle no
  (setq org-capture-templates `(("t" "Tasks" entry (file+headline "tasks.org" "Reminders")
                                 "* TODO %i%?"
                                 :empty-lines-after 1
                                 :prepend t)
                                ("n" "Notes" entry (file+headline "capture.org" "Notes")
                                 "* %? %^\n%i\n"
                                 :empty-lines-after 1)
                                ("b" "Bookmarks" entry (file+headline "capture.org" "Bookmarks")
                                 "* %:description\n\n%a%?"
                                 :empty-lines 1
                                 :immediate-finish t)
                                ("d" "Diary")
                                ("dt" "Today's TODO list" entry (file+olp+datetree "diary.org")
                                 "* Today's TODO list [/]\n%T\n\n** TODO %?"
                                 :empty-lines 1
                                 :jump-to-captured t)
                                ("do" "Other stuff" entry (file+olp+datetree "diary.org")
                                 "* %?\nT\n\n%i"
                                 :empty-lines 1
                                 :jump-to-captured t)
                                ))
#+end_src

** Ends
#+begin_src emacs-lisp

(provide 'init-org-capture)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-org-capture.el ends here
  #+end_src
