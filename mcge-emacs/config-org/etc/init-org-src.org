* init-org-src.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-org-src.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
;;; init-org-src.el --- org-src config  -*- lexical-binding: t; -*-

;;; Commentary:

  #+end_src

** Require
#+begin_src emacs-lisp
;;; Require:
(require 'org-src)
(require 'org-element)
(require 'elisp-mode)
(require 'python)

;;; Code:

  #+end_src

** Code
#+begin_src emacs-lisp
(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
;; 设置代码块的默认头参数
(setq org-babel-default-header-args
      '(
        (:eval    . "never-export")     ; 导出时不执行代码块
          (:session . "none")
          (:results . "replace")          ; 执行结果替换
          (:exports . "both")             ; 导出代码和结果
          (:cache   . "no")
          (:noweb   . "no")
          (:hlines  . "no")
          (:wrap    . "results")          ; 结果通过#+begin_results 包裹
          (:tangle  . "no")               ; 不写入文件
          ))

; ==================================
;; 如果出现代码运行结果为乱码，可以参考：
;; https://github.com/nnicandro/emacs-jupyter/issues/366
;; ==================================
(defun display-ansi-colors ()
  "Display ansi colors."
  (ansi-color-apply-on-region (point-min) (point-max)))
(add-hook 'org-babel-after-execute-hook #'display-ansi-colors)

;; ==============================================
;; 通过 overlay 在代码块里显示行号，C-c s 显示，任意键关闭
;; ==============================================
(defvar number-line-overlays '()
  "List of overlays for line numbers.")
(defun show-line-number-in-src-block ()
  "Show line number."
  (interactive)
  (save-excursion
    (let* ((src-block (org-element-context))
           (nlines (- (length
                       (s-split
                        "\n"
                        (org-element-property :value src-block)))
                      1)))
      (goto-char (org-element-property :begin src-block))
      (re-search-forward (regexp-quote (org-element-property :value src-block)))
      (goto-char (match-beginning 0))
      (cl-loop for i from 1 to nlines
               do
               (beginning-of-line)
               (let (ov)
                 (setq ov (make-overlay (point) (point)))
                 (overlay-put ov 'before-string (format "%3s | " (number-to-string i)))
                 (add-to-list 'number-line-overlays ov))
               (forward-line))))
  (read-key "Press a key to clear numbers.")
  (mapc 'delete-overlay number-line-overlays)
  (setq number-line-overlays '()))

;; =================================================
;; 执行结果后，如果结果所在的文件夹不存在将自动创建
;; =================================================
(defun check-directory-exists-before-src-execution (orig-fun
                                                    &optional arg
                                                    info
                                                    params)
  "Check ORIG-FUN ARG INFO PARAMS."
  (when (and (assq ':file (cadr (cdr (org-babel-get-src-block-info))))
             (member (car (org-babel-get-src-block-info)) '("mermaid" "ditaa" "dot" "lilypond" "plantuml" "gnuplot" "d2")))
    (let ((foldername (file-name-directory (alist-get :file (nth 2 (org-babel-get-src-block-info))))))
      (if (not (file-exists-p foldername))
          (mkdir foldername)))))
(advice-add 'org-babel-execute-src-block :before #'check-directory-exists-before-src-execution)

;; =================================================
;; 自动给结果的图片加上相关属性
;; =================================================
(defvar original-image-width-before-del "400") ; 设置图片的默认宽度为 400
(defvar original-caption-before-del "")        ; 设置默认的图示文本为空

(defun insert-attr-decls ()
  "Insert string before babel execution results."
  (insert (concat "\n#+CAPTION:"
                  original-caption-before-del
                  "\n#+ATTR_ORG: :width "
                  original-image-width-before-del
                  "\n#+ATTR_LATEX: :width "
                  (if (>= (/ (string-to-number original-image-width-before-del) 800.0) 1)
                      "1.0"
                    (number-to-string (/ (string-to-number original-image-width-before-del) 800.0)))
                  "\\linewidth :float nil"
                  "\n#+ATTR_HTML: :width "
                  original-image-width-before-del
                  )))

(defun insert-attr-decls-at (s)
  "Insert string right after specific string.  S."
  (let ((case-fold-search t))
    (if (search-forward s nil t)
        (progn
          ;; (search-backward s nil t)
            (insert-attr-decls)))))

(defun insert-attr-decls-at-results (orig-fun
                                     &optional arg
                                     info
                                     param)
  "Insert extra image attributes after babel execution.  ORIG-FUN ARG INFO PARAM."
  (interactive)
  (progn
    (when (member (car (org-babel-get-src-block-info)) '("mermaid" "ditaa" "dot" "lilypond" "plantuml" "gnuplot" "d2"))
      (setq original-image-width-before-del (number-to-string (if-let* ((babel-width (alist-get :width (nth 2 (org-babel-get-src-block-info))))) babel-width (string-to-number original-image-width-before-del))))
      (save-excursion
        ;; `#+begin_results' for :wrap results, `#+RESULTS:' for non :wrap results
          (insert-attr-decls-at "#+begin_results")))
    (org-redisplay-inline-images)))
(advice-add 'org-babel-execute-src-block :after #'insert-attr-decls-at-results)

;; 再次执行时需要将旧的图片相关参数行删除，并从中头参数中获得宽度参数，参考
;; https://emacs.stackexchange.com/questions/57710/how-to-set-image-size-in-result-of-src-block-in-org-mode
(defun get-attributes-from-src-block-result (&rest args)
  "Get information via last babel execution.  ARGS."
  (let ((location (org-babel-where-is-src-block-result))
        ;; 主要获取的是图示文字和宽度信息，下面这个正则就是为了捕获这两个信息
          (attr-regexp "[:blank:]*#\\+\\(ATTR_ORG: :width \\([0-9]\\{3\\}\\)\\|CAPTION:\\(.*\\)\\)"))
    (setq original-caption-before-del "") ; 重置为空
      (when location
        (save-excursion
          (goto-char location)
          (when (looking-at (concat org-babel-result-regexp ".*$"))
            (forward-line 2)               ; 因为有个 begin_result 的抽屉，所以往下 2 行
            ;; 通过正则表达式来捕获需要的信息
            (while (looking-at attr-regexp)
              (when (match-string 2)
                (setq original-image-width-before-del (match-string 2)))
              (when (match-string 3)
                (setq original-caption-before-del (match-string 3)))
              (forward-line)               ; 因为设置了:wrap，所以这里不需要删除这一行
              )
            )))))
(advice-add 'org-babel-execute-src-block :before #'get-attributes-from-src-block-result)

;; 代码块语法高亮
(setq org-src-fontify-natively t)
;; 使用编程语言的 TAB 绑定设置
(setq org-src-tab-acts-natively t)
;; 保留代码块前面的空格
(setq org-src-preserve-indentation t)
;; 代码块编辑窗口的打开方式：当前窗口+代码块编辑窗口
(setq org-src-window-setup 'reorganize-frame)
;; 执行前是否需要确认
(setq org-confirm-babel-evaluate nil)
;; 代码块默认前置多少空格
;(setq org-edit-src-content-indentation 0)
;; 代码块的语言模式设置，设置之后才能正确语法高亮
(setq org-src-lang-modes '(("C"            . c)
                           ("C++"          . c++)
                           ("bash"         . sh)
                           ("cpp"          . c++)
                           ("elisp"        . emacs-lisp)
                           ("python"       . python)
                           ("shell"        . sh)
                           ("mysql"        . sql)
                           ("Dart"         . Dart)
                           ("typescript"   . typescript)
                           ("rust"         . rust)
                           ))
;; 在这个阶段，只需要加载默认支持的语言
(setq org-babel-load-languages '((python          . t)
                                 (awk             . t)
                                 (C               . t)
                                 (calc            . t)
                                 (emacs-lisp      . t)
                                 (eshell          . t)
                                 (shell           . t)
                                 (sql             . t)
                                 (css             . t)
                                 (Dart            . t)
                                 (typescript      . t)
                                 (rust            . t)
                                 ))

(add-to-list 'org-babel-default-header-args:emacs-lisp
             '(:results . "value pp"))
(defconst eval-as-comment-prefix " ⇒ ")

(defun eval-to-comment (&optional arg)
  "Eval to comment ARG."
  (interactive "P")
  ;; (if (not (looking-back ";\\s*"))
  ;;     (call-interactively 'comment-dwim))
    (call-interactively 'comment-dwim)
    (progn
      (search-backward ";")
      (forward-char 1))
    (delete-region (point) (line-end-position))
    (save-excursion
      (let ((current-prefix-arg '(4)))
        (call-interactively 'eval-last-sexp)))
    (insert eval-as-comment-prefix)
    (end-of-line 1))
#+end_src

** Org src Split
#+begin_src emacs-lisp
(defun modi/org-in-any-block-p ()
  "Return non-nil if the point is in any Org block.

The Org block can be *any*: src, example, verse, etc., even any
Org Special block.

This function is heavily adapted from `org-between-regexps-p'."
  (save-match-data
    (let ((pos (point))
          (case-fold-search t)
          (block-begin-re "^[[:blank:]]*#\\+begin_\\(?1:.+?\\)\\(?: .*\\)*$")
          (limit-up (save-excursion (outline-previous-heading)))
          (limit-down (save-excursion (outline-next-heading)))
          beg end)
      (save-excursion
        ;; Point is on a block when on BLOCK-BEGIN-RE or if
        ;; BLOCK-BEGIN-RE can be found before it...
        (and (or (org-in-regexp block-begin-re)
                 (re-search-backward block-begin-re limit-up :noerror))
             (setq beg (match-beginning 0))
             ;; ... and BLOCK-END-RE after it...
             (let ((block-end-re (concat "^[[:blank:]]*#\\+end_"
                                         (match-string-no-properties 1)
                                         "\\( .*\\)*$")))
               (goto-char (match-end 0))
               (re-search-forward block-end-re limit-down :noerror))
             (> (setq end (match-end 0)) pos)
             ;; ... without another BLOCK-BEGIN-RE in-between.
             (goto-char (match-beginning 0))
             (not (re-search-backward block-begin-re (1+ beg) :noerror))
             ;; Return value.
             (cons beg end))))))

(defun modi/org-split-block ()

"Sensibly split the current Org block at point.

(1) Point in-between a line

    ,#+begin_src emacs-lisp             #+begin_src emacs-lisp
    (message▮ \"one\")                   (message \"one\")
    (message \"two\")          -->       #+end_src
    \\#+end_src                          ▮
                                       ,#+begin_src emacs-lisp
                                       (message \"two\")
                                       \\#+end_src

(2) Point at EOL

    ,#+begin_src emacs-lisp             #+begin_src emacs-lisp
    (message \"one\")▮                   (message \"one\")
    (message \"two\")          -->       #+end_src
    \\#+end_src                          ▮
                                       ,#+begin_src emacs-lisp
                                       (message \"two\")
                                       \\#+end_src

(3) Point at BOL

    ,#+begin_src emacs-lisp             #+begin_src emacs-lisp
    (message \"one\")                    (message \"one\")
    ▮(message \"two\")          -->      #+end_src
    \\#+end_src                          ▮
                                       ,#+begin_src emacs-lisp
                                       (message \"two\")
                                       \\#+end_src
"
      (interactive)
      (if (modi/org-in-any-block-p)
          (save-match-data
            (save-restriction
              (widen)
              (let ((case-fold-search t)
                    (at-bol (bolp))
                    block-start
                    block-end)
                (save-excursion
                  (re-search-backward "^\\(?1:[[:blank:]]*#\\+begin_.+?\\)\\(?: .*\\)*$" nil nil 1)
                  (setq block-start (match-string-no-properties 0))
                  (setq block-end (replace-regexp-in-string
                                   "begin_" "end_" ;Replaces "begin_" with "end_", "BEGIN_" with "END_"
                                   (match-string-no-properties 1))))
                ;; Go to the end of current line, if not at the BOL
                (unless at-bol
                  (end-of-line 1))
                (insert (concat (if at-bol "" "\n")
                                block-end
                                "\n\n"
                                block-start
                                (if at-bol "\n" "")))
                ;; Go to the line before the inserted "#+begin_ .." line
                (beginning-of-line (if at-bol -1 0)))))
        (message "Point is not in an Org block")))

(defun modi/org-meta-return (&optional arg)
  "Insert a new heading or wrap a region in a table.
Calls `org-insert-heading', `org-insert-item',
`org-table-wrap-region', or `modi/org-split-block' depending on
context.  When called with an argument, unconditionally call
`org-insert-heading'."
  (interactive "P")
  (org-check-before-invisible-edit 'insert)
  (or (run-hook-with-args-until-success 'org-metareturn-hook)
      (call-interactively (cond (arg #'org-insert-heading)
                                ((org-at-table-p) #'org-table-wrap-region)
                                ((org-in-item-p) #'org-insert-item)
                                ((modi/org-in-any-block-p) #'modi/org-split-block)
                                (t #'org-insert-heading)))))
(advice-add 'org-meta-return :override #'modi/org-meta-return)
#+end_src


** Ends
#+begin_src emacs-lisp

(provide 'init-org-src)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-org-src.el ends here
  #+end_src
