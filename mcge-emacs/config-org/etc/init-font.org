* init-font.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-font.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
  ;;; init-font.el --- Emacs set font  -*- lexical-binding: t; -*-

  ;;; Commentary:

  #+end_src

** Require
#+begin_src emacs-lisp
  ;;; Require:
  (require 'cl-lib)
  (require 'init-const)

  ;;; Code :
  #+end_src

** Code
#+begin_src emacs-lisp
  (defun mcg/font-setup-common(character font-list &optional scale-factor)
    "Set fonts for multi CHARACTER from FONT-LIST and modify style with SCALE-FACTOR."
    (cl-loop for font in font-list
	     when (find-font (font-spec :name font))
	      return (if (not character)
		        (set-face-attribute 'default nil
					    :family font
					    :height (cond (*is-mac* 150)
							  (*is-win32p* 130)
		 					  (*is-linux* 130)))
 		      (when scale-factor (setq face-font-rescale-alist `((,font . ,scale-factor))))
  		      (set-fontset-font t character (font-spec :family font) nil 'prepend))))

  (defun mcg/font-setup (&optional default-fonts unicode-fonts emoji-fonts cjk-fonts)
    "Font setup, with optional DEFAULT-FONTS, UNICODE-FONTS, EMOJI-FONTS, CJK-FONTS."
    (interactive)
    (when (display-graphic-p)
      (mcg/font-setup-common nil      (if default-fonts default-fonts mcg--fonts-default))
      (mcg/font-setup-common 'unicode (if unicode-fonts unicode-fonts mcg--fonts-unicode))
      (mcg/font-setup-common 'emoji   (if emoji-fonts emoji-fonts mcg--fonts-emoji))
      (dolist (charset '(kana han bopomofo cjk-misc))
        (mcg/font-setup-common charset (if cjk-fonts cjk-fonts mcg--fonts-cjk) 1.2))))

  ;; Get the font set
  (mcg/font-setup)
  (add-hook 'window-setup-hook #'mcg/font-setup)
  (add-hook 'server-after-make-frame-hook #'mcg/font-setup)
#+end_src

** Ends
#+begin_src emacs-lisp
  (provide 'init-font)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-font.el ends here
  #+end_src
