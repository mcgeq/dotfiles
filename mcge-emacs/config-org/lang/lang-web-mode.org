* lang-web-mode.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "lang-web-mode.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
  ;;; lang-web-mode.el ---   -*- lexical-binding: t; -*-

  ;;; Commentary:

  #+end_src

** Require
#+begin_src emacs-lisp
  ;;; Require:
  (require 'web-mode)
  (require 'lang-cpp)
  (require 'eglot)

  ;;; Code :
  #+end_src

** Web Mode
#+begin_src emacs-lisp
  (add-hook 'web-mode-hook 'mcg-web-mode-hook)

  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+end_src

** TypeScript
#+begin_src emacs-lisp
  ;; TypeScript
  (add-to-list 'eglot-server-programs '(web-mode . ("typescript-language-server" "--stdio")))
#+end_src


** Custom function
#+begin_src emacs-lisp
  (defun mcg-web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-style-padding 1)
    (setq web-mode-script-padding 1)
    (setq web-mode-block-padding 0)
    (setq web-mode-comment-style 2)
    (set-face-attribute 'web-mode-css-at-rule-face nil :foreground "Pink3"))
#+end_src

** Ends
#+begin_src emacs-lisp
  (provide 'lang-web-mode)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; lang-web-mode.el ends here
  #+end_src
