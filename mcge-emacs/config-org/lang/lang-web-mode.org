* lang-web-mode.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "lang-web-mode.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
;;; lang-web-mode.el ---   -*- lexical-binding: t; -*-

;;; Commentary:

  #+end_src

** Require
#+begin_src emacs-lisp
;;; Require:
(require 'web-mode)
(require 'js)
(require 'fingertip)
(require 'instant-rename-tag)
(require 'highlight-matching-tag)
;;; Code:
#+end_src

** Confige

#+begin_src emacs-lisp
(when (featurep 'cocoa)
  ;; Initialize environment from user's shell to make eshell know every PATH by other shell.
  (require 'exec-path-from-shell)
  (exec-path-from-shell-initialize))

(setq web-mode-enable-auto-quoting nil) ;disable automatic insertion of double quotes, not easy to use if cursor in string

(highlight-matching-tag 1)

;; Emmit.
(setq web-mode-tag-auto-close-style 2) ;2 mean auto-close with > and </.
(setq web-mode-markup-indent-offset 2)

;; We-mode.
;;(lazy-load-set-keys fingertip-key-alist web-mode-map)
;; (lazy-load-local-keys
;;  '(
;;    ("M-s-SPC" . web-mode-element-content-select)
;;    ("C-s-l" . web-mode-element-clone)
;;    ("C-M-SPC" . web-mode-mark-and-expand)
;;    ("C-:" . web-mode-comment-or-uncomment)
;;    ("C-M-SPC" . mark-sexp)
;;    ("M-R" . instant-rename-tag)
;;    )
;;  web-mode-map
;;  "web-mode-extension")
#+end_src

** Web Mode
#+begin_src emacs-lisp :tangle no
(add-hook 'web-mode-hook 'mcg-web-mode-hook)

(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+end_src

** TypeScript
#+begin_src emacs-lisp
;; TypeScript
#+end_src


** Custom function
#+begin_src emacs-lisp :tangle no
(defun mcg-web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-style-padding 1)
  (setq web-mode-script-padding 0)
  (setq web-mode-block-padding 0)
  (setq web-mode-comment-style 2)
  (set-face-attribute 'web-mode-css-at-rule-face nil :foreground "Pink3"))
#+end_src

** Ends
#+begin_src emacs-lisp
(provide 'lang-web-mode)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lang-web-mode.el ends here
  #+end_src
