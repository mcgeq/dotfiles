* lang-clojure.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "lang-clojure.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
;;; lang-clojure.el ---   -*- lexical-binding: t; -*-

;;; Commentary:

  #+end_src

** Require
#+begin_src emacs-lisp
;;; Require:
(require 'clojure-ts-mode)
(require 'paredit)

;;; Code:
#+end_src

** Code
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.clj\\'" . clojure-ts-mode))


;; Sets the Clojure top-level annotation and default indentation style
(setq clojure-toplevel-inside-comment-form t
      clojure-defun-style-default-indent t)

;; Apply the same settings in clojure-mode and clojure-ts-mode
(defun mcge-clojure-setup ()
  "Set up key bindings and indentation for Clojure modes."
  (define-key clojure-mode-map (kbd "C-c )") 'paredit-forward-slurp-sexp)
  (define-key clojure-mode-map (kbd "C-c (") 'paredit-forward-barf-sexp)
  (define-key clojure-ts-mode-map (kbd "C-c )") 'paredit-forward-slurp-sexp)
  (define-key clojure-ts-mode-map (kbd "C-c (") 'paredit-forward-barf-sexp)
  
;; Set a custom Clojure macro indentation style
(define-clojure-indent
 (re-frame/reg-event-fx :defn)
 (re-frame/reg-event-db :defn)
 (re-frame/reg-sub :defn)
 (re-frame/reg-fx :defn)
 (t/async :defn)
 (thrown-with-msg? :defn)
 (d/input :defn)
 (d/textarea :defn)
 (d/option :defn)
 (d/select :defn)
 (d/a :defn)
 (d/abbr :defn)
 (d/address :defn)
 (d/area :defn)
 (d/article :defn)
 (d/aside :defn)
 (d/audio :defn)
 (d/b :defn)
 (d/base :defn)
 (d/bdi :defn)
 (d/bdo :defn)
 (d/big :defn)
 (d/blockquote :defn)
 (d/body :defn)
 (d/br :defn)
 (d/button :defn)
 (d/canvas :defn)
 (d/caption :defn)
 (d/cite :defn)
 (d/code :defn)
 (d/col :defn)
 (d/colgroup :defn)
 (d/data :defn)
 (d/datalist :defn)
 (d/dd :defn)
 (d/del :defn)
 (d/details :defn)
 (d/dfn :defn)
 (d/dialog :defn)
 (d/div :defn)
 (d/dl :defn)
 (d/dt :defn)
 (d/em :defn)
 (d/embed :defn)
 (d/fieldset :defn)
 (d/figcaption :defn)
 (d/figure :defn)
 (d/footer :defn)
 (d/form :defn)
 (d/h1 :defn)
 (d/h2 :defn)
 (d/h3 :defn)
 (d/h4 :defn)
 (d/h5 :defn)
 (d/h6 :defn)
 (d/head :defn)
 (d/header :defn)
 (d/hgroup :defn)
 (d/hr :defn)
 (d/html :defn)
 (d/i :defn)
 (d/iframe :defn)
 (d/img :defn)
 (d/ins :defn)
 (d/kbd :defn)
 (d/keygen :defn)
 (d/label :defn)
 (d/legend :defn)
 (d/li :defn)
 (d/link :defn)
 (d/main :defn)
 (d/map :defn)
 (d/mark :defn)
 (d/menu :defn)
 (d/menuitem :defn)
 (d/meta :defn)
 (d/meter :defn)
 (d/nav :defn)
 (d/noscript :defn)
 (d/object :defn)
 (d/ol :defn)
 (d/optgroup :defn)
 (d/output :defn)
 (d/p :defn)
 (d/param :defn)
 (d/picture :defn)
 (d/pre :defn)
 (d/progress :defn)
 (d/q :defn)
 (d/rp :defn)
 (d/rt :defn)
 (d/ruby :defn)
 (d/s :defn)
 (d/samp :defn)
 (d/script :defn)
 (d/section :defn)
 (d/small :defn)
 (d/source :defn)
 (d/span :defn)
 (d/strong :defn)
 (d/style :defn)
 (d/sub :defn)
 (d/summary :defn)
 (d/sup :defn)
 (d/table :defn)
 (d/tbody :defn)
 (d/td :defn)
 (d/tfoot :defn)
 (d/th :defn)
 (d/thead :defn)
 (d/time :defn)
 (d/title :defn)
 (d/tr :defn)
 (d/track :defn)
 (d/u :defn)
 (d/ul :defn)
 (d/var :defn)
 (d/video :defn)
 (d/wbr :defn)
 (d/circle :defn)
 (d/clip :defn)
 (d/Path :defn)
 (d/ellipse :defn)
 (d/g :defn)
 (d/line :defn)
 (d/mask :defn)
 (d/path :defn)
 (d/pattern :defn)
 (d/polyline :defn)
 (d/rect :defn)
 (d/svg :defn)
 (d/text :defn)
 (d/defs :defn)
 (d/linear :defn)
 (d/Gradient :defn)
 (d/polygon :defn)
 (d/radial :defn)
 (d/stop :defn)
 (d/tspan :defn)
 (js-await 1)))

;; Bind Clojure's hook function
;; (with-eval-after-load "clojure-mode"
;;   (mcge-clojure-setup))

(with-eval-after-load "clojure-ts-mode"
  (mcge-clojure-setup))

#+end_src

** Ends
#+begin_src emacs-lisp
(provide 'lang-clojure)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lang-clojure.el ends here
#+end_src
