* init-lsp-bridge.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-lsp-bridge.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
;;; init-lsp-bridge.el --- Emacs initialization config  -*- lexical-binding: t; -*-

;;; Commentary:

#+end_src
  
** Require
#+begin_src emacs-lisp
(require 'lsp-bridge)
(require 'lsp-bridge-jdtls)
(require 'flymake-bridge)
(require 'lang-cpp)
(require 'lang-java)
(require 'lang-typescript)
(require 'lang-rust)
(require 'lang-css-mode)
(require 'lang-web-mode)
(require 'lang-clojure)
;;; Code:
#+end_src

** Config bridge

#+begin_src emacs-lisp
;; custom language server dir
(setq lsp-bridge-user-langserver-dir mcgemacs-custom-lsp-bridge-langserver-dir)
(setq lsp-bridge-user-multiserver-dir mcgemacs-custom-lsp-bridge-multiserver-dir)
(setq lsp-bridge-enable-completion-in-minibuffer t)
(setq lsp-bridge-signature-show-function 'lsp-bridge-signature-show-with-frame)
(setq lsp-bridge-enable-with-tramp t)
(setq lsp-bridge-enable-org-babel t)
(setq lsp-bridge-enable-inlay-hint t)
(setq lsp-bridge-semantic-tokens t)
(setq-default lsp-bridge-semantic-tokens-ignore-modifier-limit-types ["variable"])

(setq acm-enable-capf t)
(setq acm-enable-quick-access t)
(setq acm-backend-yas-match-by-trigger-keyword t)
(setq acm-enable-tabnine nil)
(setq acm-candidate-match-function 'orderless-flex)
(setq acm-enable-codeium nil)
(setq acm-enable-lsp-workspace-symbol t)

(global-lsp-bridge-mode)

(add-to-list 'lsp-bridge-multi-lang-server-extension-list '(("html") . "html_tailwindcss"))
(add-to-list 'lsp-bridge-multi-lang-server-extension-list '(("css") . "css_tailwindcss"))

(setq lsp-bridge-get-multi-lang-server-by-project
      (lambda (project-path filepath)
        ;;
        (save-excursion
          (when (string-equal (file-name-extension filepath) "ts")
            (dolist (buf (buffer-list))
              (when (string-equal (buffer-file-name buf) filepath)
                (with-current-buffer buf
                  (goto-char (point-min))
                  (when (search-backward-regexp (regexp-quote "from \"https://deno.land") nil t)
                    (return "deno")))))))))
#+end_src

** flymake bridge
#+begin_src emacs-lisp
;; flymake-bridge
(add-hook 'lsp-bridge-mode-hook #'flymake-bridge-setup)

#+end_src

** Update modify file time
#+begin_src emacs-lisp
;; save file update time
;; 在编程模式下启用保存文件时自动更新 `Last Modified` 时间的功能
(add-hook 'prog-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'mcge/update-file-headers nil t)))
#+end_src


** Rust with eglot

#+begin_src emacs-lisp :tangle no
;; rust 使用 eglot
(defun enable-lsp-bridge-if-not-rust ()
  "Enable lsp-bridge-mode if the current major mode is not rust-ts-mode or rust-mode."
  (unless (or (derived-mode-p 'rust-mode)
              (derived-mode-p 'rust-ts-mode))
    (lsp-bridge-mode 1)))  ;; 启用 lsp-bridge-mode

;; 将该函数添加到 after-change-major-mode-hook
(add-hook 'after-change-major-mode-hook 'enable-lsp-bridge-if-not-rust)


#+end_src

** End
#+begin_src emacs-lisp
(provide 'init-lsp-bridge)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-lsp-bridge.el ends here
#+end_src
