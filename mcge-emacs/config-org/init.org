* init.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init.el") :lexical t
:END:

** Headers
#+BEGIN_SRC emacs-lisp
;;; init.el -- Emacs initialization config -*- lexical-binding: t; -*-
;;; Commentary:
#+END_SRC

** Require
#+BEGIN_SRC emacs-lisp
;;; Require:
(require 'init-const)
(require 'init-font)
(require 'lazy-load)

;;; Code:
#+END_SRC


** Set `gc-cons-threshold'
#+BEGIN_SRC emacs-lisp
(let (
    ;; 加载的时候临时增大`gc-cons-threshold'以加速启动速度
    (gc-cons-threshold most-positive-fixnum)
    (gc-cons-percentage 0.6)
    ;; 清空避免加载远程文件的时候分析文件
    (file-name-handler-alist nil))
;; 让窗口启动更平滑
(setq frame-inhibit-implied-resize t)
(setq-default inhibit-redisplay t
              inhibit-message t)
(add-hook 'window-setup-hook
	  (lambda ()
            (setq-default inhibit-redisplay nil
		          inhibit-message nil)
            (redisplay)))
)
#+END_SRC

** require core config
#+BEGIN_SRC emacs-lisp
(require 'init-generic)
(require 'init-core)
(require 'init-function)
#+END_SRC

** Python Install Packages

#+begin_src emacs-lisp
;; Add the function to the startup hook
(add-hook 'emacs-startup-hook
          (lambda ()
            (install-python-packages)))
#+end_src

** Flask Start

#+begin_src emacs-lisp
;; 在 Emacs 启动后异步执行 Python 脚本
;;(add-hook 'emacs-startup-hook
;;          (lambda ()
;;            (run-python-script-asynchronously (concat mcgemacs-root-dir "/scripts/segment.py"))))
#+end_src

** Ends
#+BEGIN_SRC emacs-lisp
(provide 'init)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init.el ends here
#+END_SRC

