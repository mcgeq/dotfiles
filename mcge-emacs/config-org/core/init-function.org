* init-function.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-function.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
;;; init-function.el --- custome function  -*- lexical-binding: t; -*-

;;; Commentary:

#+end_src

** Require
#+begin_src emacs-lisp
;;; Require:

;;; Code:
#+end_src

** Code
#+begin_src emacs-lisp
(defun mcg/open-init-file()
  "Quick open configuration file."
  (interactive)
  (if (file-exists-p (concat mcgemacs-config-dir "/init.org"))
      (find-file (concat mcgemacs-config-dir "/init.org"))
    (message "Please chek the file does not exist.")
    )
  )

;; 将列表加入到列表的函数
(defun add-list-to-list (dst src)
  "Similar to `add-to-list', DST SRC but accepts a list as 2nd argument."
  (set dst
       (append (eval dst) src)))

(defun +vc-branch-name ()
  (when vc-mode
    (propertize
     (replace-regexp-in-string
      "Git[-:]"
      ""
      (substring-no-properties vc-mode))
     'face
     'bold)))

(defun mcg/customize-image-file-name ()
  "Define the image save directory and name based on the current file name."
  (defvar full-file-name)
  (setq full-file-name (file-name-sans-extension (file-name-nondirectory buffer-file-name)))
  (let* ((imagefile "./images/"))
    (unless (file-exists-p imagefile)
      (make-directory imagefile))
    (setq imagefile (concat "./images/" full-file-name "/"))
    ;;    (setq imagefile (concat "./images/" (format-time-string "%Y%m%d") "/"))
    (unless (file-exists-p imagefile)
      (make-directory imagefile))
    (concat (make-temp-name (concat imagefile
                                    (format-time-string "%Y%m%d_%H%M%S_")))
            ".png"))
  )

;; window insert org images
;; `https://emacs-china.org/t/win10-emacs-org-mode/21942/2'
(defun mcg/org-screenshot-on-windows ()
  "Windows platform insert pictures in the org file."
  (interactive)
  (let ((filename (mcg/customize-image-file-name)))
    (shell-command (concat "powershell -command \"Add-Type -AssemblyName System.Windows.Forms;if ($([System.Windows.Forms.Clipboard]::ContainsImage())) {$image = [System.Windows.Forms.Clipboard]::GetImage();[System.Drawing.Bitmap]$image.Save('"
                           filename "',[System.Drawing.Imaging.ImageFormat]::Png); Write-Output 'clipboard content saved as file'} else {Write-Output 'clipboard does not contain image data'}\""))
    (insert (concat "[[file:" filename "]]")))
  (org-display-inline-images)
  )
#+end_src

** 指定代码目录
#+begin_src emacs-lisp
(defun mcg/open-source-code-dir ()
  "Open source coding directory."
  (interactive)
  )
#+end_src

** Update file modify time
#+begin_src emacs-lisp
(defun mcge/update-last-modified-time ()
  "Update the `Last Modified' timestamp in the current buffer."
  (interactive)
  (when (and (buffer-file-name)
             (not (string-match-p "init-function" (buffer-name))))
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "Last Modified:.*$" nil t)
        (replace-match (concat "Last Modified:  " (format-time-string "%Y-%m-%d %H:%M:%S")))))))

;; Update modified By
(defun mcge/update-last-modified-by ()
  "Update the `Modified By' in the current buffer."
  (interactive)
  (when (and (buffer-file-name)
             (not (string-match-p "init-function" (buffer-name))))
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "Modified   By:.*$" nil t)
        (replace-match (concat "Modified   By:  " (get-git-user-name)
                               " <" (get-git-user-email) ">"))))))

(defun mcge/update-file-headers ()
  "Update the `Last Modified' and `Modified By' lines in the current buffer."
  (interactive)
  (mcge/update-last-modified-time)
  (mcge/update-last-modified-by))
#+end_src


** Custom C-a

#+begin_src emacs-lisp
(defun mcge-smart-move-beginning-of-line ()
  "Move point to the first non-whitespace character, or to the beginning of the line."
  (interactive)  ;; This makes the function callable as a command
  (let ((current-point (point)))
    (back-to-indentation)  ;; Move to the first non-whitespace character
    (when (eq current-point (point))  ;; If point was already there, move to beginning of line
      (move-beginning-of-line 1))))
#+end_src

** Python install packages

#+begin_src emacs-lisp
(defun install-python-packages ()
  "Run a Python script to install Flask and Jieba if not already installed."
  (interactive)
  (let* ((python-exec (or (executable-find "python") (executable-find "python3")))
         (python-script (concat mcgemacs-root-dir "/scripts/install_packages.py"))
         (output-buffer "*Python Install Output*"))
    (unless python-exec
      (error "Python executable not found in PATH"))
    (unless (file-exists-p python-script)
      (error "Python script not found: %s" python-script))
    ;; Run the Python script asynchronously and capture only errors
    (with-current-buffer (get-buffer-create output-buffer)
      (erase-buffer))  ;; Clear any previous output
    (set-process-sentinel
     (start-process "install-python-packages" output-buffer python-exec python-script)
     (lambda (process event)
       (if (and (string= event "finished\n")
                (= (process-exit-status process) 0))
           (progn
             ;; If the process finished successfully, hide the output buffer
             (kill-buffer output-buffer)
             ;; Run the next Python script asynchronously
             (run-python-script-asynchronously (concat mcgemacs-root-dir "/scripts/segment.py")))
         ;; If there's an error, display the output buffer
         (progn
           (message "Error occurred during package installation. See %s for details." output-buffer)
           (pop-to-buffer output-buffer)))))))
#+end_src

#+begin_src emacs-lisp :tangle no
(defun install-python-packages ()
  "Run a Python script to install Flask and Jieba if not already installed."
  (interactive)
  (let* ((python-exec (or (executable-find "python") (executable-find "python3")))
         (python-script (concat mcgemacs-root-dir "/scripts/install_packages.py"))
         (output-buffer "*Python Install Output*"))
    (unless python-exec
      (error "Python executable not found in PATH"))
    (unless (file-exists-p python-script)
      (error "Python script not found: %s" python-script))
    ;; Run the Python script asynchronously and capture only errors
    (with-current-buffer (get-buffer-create output-buffer)
      (erase-buffer))  ;; Clear any previous output
    (set-process-sentinel
     (start-process "install-python-packages" output-buffer python-exec python-script)
     (lambda (process event)
       (when (and (string= event "finished\n")
                  (= (process-exit-status process) 0))
         ;; If the process finished successfully, hide the output buffer
         (kill-buffer output-buffer))
       (when (not (= (process-exit-status process) 0))
         ;; If there's an error, display the output buffer
         (message "Error occurred during package installation. See %s for details." output-buffer)
         (pop-to-buffer output-buffer))))))
#+end_src

** Flask jieba Server

#+begin_src emacs-lisp
(defun run-python-script-asynchronously (script-path)
  "Run the Python script SCRIPT-PATH asynchronously in the background."
  (make-process
   :name "chinese-participle-process"
   :command (list "python" (expand-file-name script-path))
   :noquery t
   :buffer "*chinese-participle*"
   :stderr "*chinese-participle*")
  ;; 控制输出缓冲区的行为，使其不自动弹出
  (with-current-buffer "*chinese-participle*"
    (let ((display-buffer-alist
           '(("\\*chinese-participle\\*"
              (display-buffer-no-window)))))
      (bury-buffer))))
#+end_src

#+begin_src emacs-lisp :tangle no
(defun run-python-script-asynchronously (script-path)
  "Run the Python script SCRIPT-PATH asynchronously."
  (let ((command (format "python %s" (shell-quote-argument script-path))))
    (async-shell-command command "*chinese-participle*")))
#+end_src

#+begin_src emacs-lisp :tangle no
(defun run-python-script-asynchronously (script-path)
  "Run the Python script SCRIPT-PATH asynchronously."
  (let ((command (format "python %s" (shell-quote-argument script-path))))
    (async-shell-command command "*chinese-participle*")))
#+end_src

#+begin_src emacs-lisp :tangle no
(defun install-python-packages ()
  "Run a Python script to install Flask and Jieba if not already installed."
  (interactive)
  (let* ((python-exec (or (executable-find "python") (executable-find "python3")))
         (python-script (concat mcgemacs-root-dir "/scripts/install_packages.py")))
    (unless python-exec
      (error "Python executable not found in PATH"))
    (unless (file-exists-p python-script)
      (error "Python script not found: %s" python-script))
    ;; Use async-shell-command to run the Python script asynchronously
    (async-shell-command (format "%s %s" python-exec python-script))))
#+end_src

#+begin_src emacs-lisp :tangle no
(defun install-python-packages ()
  "Run a Python script to install Flask and Jieba if not already installed."
  (interactive)
  (let* ((python-exec (or (executable-find "python") (executable-find "python3")))
         (python-script (concat mcgemacs-root-dir "/scripts/install_packages.py")))
    (unless python-exec
      (error "Python executable not found in PATH"))
    (unless (file-exists-p python-script)
      (error "Python script not found: %s" python-script))
    (shell-command (format "%s %s" python-exec python-script))))
#+end_src

** Ends
#+begin_src emacs-lisp
(provide 'init-function)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-function.el ends here
#+end_src
